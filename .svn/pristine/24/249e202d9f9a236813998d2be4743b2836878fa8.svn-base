package com.isansys.pse_isansysportal;

import android.Manifest;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Handler;
import android.provider.Settings;

import androidx.core.app.ActivityCompat;

import com.isansys.remotelogging.RemoteLogging;

public class Permissions
{
    private final MainActivityInterface mainActivityInterface;

    private final String TAG = this.getClass().getSimpleName();
    private final RemoteLogging Log;

    public Permissions(MainActivityInterface mainActivityInterface)
    {
        this.mainActivityInterface = mainActivityInterface;

        Log = mainActivityInterface.getMainActivityLogger();
    }

    private int checkSelfPermission(String permission)
    {
        if (permission == null || permission.length() == 0)
        {
            return PackageManager.PERMISSION_DENIED;
        }

        try
        {
            return mainActivityInterface.getAppContext().checkPermission(permission, android.os.Process.myPid(), android.os.Process.myUid());
        }
        catch (Throwable e)
        {
            return PackageManager.PERMISSION_DENIED;
        }
    }

    public boolean haveOverlayPermission()
    {
        return Settings.canDrawOverlays(mainActivityInterface.getAppContext());
    }

    public boolean haveWriteSettingsPermission()
    {
        return Settings.System.canWrite(mainActivityInterface.getAppContext());
    }

    public boolean haveCameraPermission()
    {
        return checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED;
    }

    public boolean haveRecordAudioPermission()
    {
        return checkSelfPermission(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED;
    }

    public boolean haveWriteExternalStoragePermission()
    {
        return checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
    }

    public boolean haveAccessNotificationPermission()
    {
        // If the Gateway is on Mute to start with for some reason, trying to adjust the volume via code will cause a crash
        NotificationManager notificationManager = (NotificationManager) mainActivityInterface.getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
        return notificationManager.isNotificationPolicyAccessGranted();
    }

    public boolean haveInstallPackagesPermission()
    {
        return mainActivityInterface.getActivity().getPackageManager().canRequestPackageInstalls();
    }

    public boolean checkForRequiredAndroidPermissions()
    {
        return haveOverlayPermission()
                && haveWriteSettingsPermission()
                && haveCameraPermission()
                && haveRecordAudioPermission()
                && haveAccessNotificationPermission()
                && haveWriteExternalStoragePermission()
                && haveInstallPackagesPermission();
    }
    
    private final Handler handler = new Handler();

    private final Runnable checkForOverlayPermissionBeingGranted = new Runnable()
    {
        @Override
        public void run()
        {
            Log.d(TAG, "Checking for Overlay permission");

            if (haveOverlayPermission())
            {
                Log.d(TAG, "Got Overlay permission");

                // Got permission, re-launch MainActivity.
                mainActivityInterface.triggerApplicationRestart();
            }
            else
            {
                Log.e(TAG, "Do NOT have Overlay permission");

                handler.postDelayed(this, 200);
            }
        }
    };

    private final Runnable checkForWriteSettingsPermissionBeingGranted = new Runnable()
    {
        @Override
        public void run()
        {
            Log.d(TAG, "Checking for Write Settings permission");

            if (haveWriteSettingsPermission())
            {
                Log.d(TAG, "Got Write Settings permission");

                // Got permission, re-launch MainActivity.
                mainActivityInterface.triggerApplicationRestart();
            }
            else
            {
                Log.e(TAG, "Do NOT have Write Settings permission");

                handler.postDelayed(this, 200);
            }
        }
    };

    private final Runnable checkForAccessNotificationPolicyPermissionBeingGranted = new Runnable()
    {
        @Override
        public void run()
        {
            Log.d(TAG, "Checking for Access Notification Policy permission");

            if (haveAccessNotificationPermission())
            {
                Log.d(TAG, "Got Access Notification permission");

                // Got permission, re-launch MainActivity.
                mainActivityInterface.triggerApplicationRestart();
            }
            else
            {
                Log.e(TAG, "Do NOT have Access Notification permission");

                handler.postDelayed(this, 200);
            }
        }
    };

    // For unknown reason, having this here seems to "crash" the UI when permission is granted.
    private final Runnable checkForInstallPackagesPermissionBeingGranted = new Runnable()
    {
        @Override
        public void run()
        {
            Log.d(TAG, "Checking for Install Packages permission");

            if (haveInstallPackagesPermission())
            {
                Log.d(TAG, "Got Install Packages permission");

                // Got permission, re-launch MainActivity.
                mainActivityInterface.triggerApplicationRestart();
            }
            else
            {
                Log.e(TAG, "Do NOT have Install Packages permission");
                handler.postDelayed(this, 1000);
            }
        }
    };

    public void requestOverlayPermission()
    {
        handler.postDelayed(checkForOverlayPermissionBeingGranted, 1000);

        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
        intent.setData(Uri.parse("package:" + mainActivityInterface.getActivity().getPackageName()));
        mainActivityInterface.getActivity().startActivity(intent);
    }

    public void requestWriteSettingsPermission()
    {
        handler.postDelayed(checkForWriteSettingsPermissionBeingGranted, 1000);

        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS);
        intent.setData(Uri.parse("package:" + mainActivityInterface.getActivity().getPackageName()));
        mainActivityInterface.getActivity().startActivity(intent);
    }

    public void requestAccessNotificationPolicyPermission()
    {
        handler.postDelayed(checkForAccessNotificationPolicyPermissionBeingGranted, 1000);

        Intent intent = new Intent(Settings.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS);
        mainActivityInterface.getActivity().startActivity(intent);
    }

    public void requestInstallPackagesPermission()
    {
        // Permission being enabled code only works on Android 8 Gateways for unknown reason
        if (android.os.Build.VERSION.SDK_INT == android.os.Build.VERSION_CODES.O_MR1)
        {
            handler.postDelayed(checkForInstallPackagesPermissionBeingGranted, 1000);
        }

        Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
        intent.setData(Uri.parse("package:" + mainActivityInterface.getActivity().getPackageName()));
        mainActivityInterface.getActivity().startActivity(intent);
    }

    public static final int CAMERA_PERMISSION_REQUEST_CODE = 100;
    public static final int REQUEST_AUDIO_CODE = 101;
    public static final int WRITE_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE = 102;

    public void requestCameraPermission()
    {
        ActivityCompat.requestPermissions(mainActivityInterface.getActivity(), new String[]{Manifest.permission.CAMERA}, CAMERA_PERMISSION_REQUEST_CODE);
    }

    public void requestRecordAudioPermission()
    {
        ActivityCompat.requestPermissions(mainActivityInterface.getActivity(), new String[]{android.Manifest.permission.RECORD_AUDIO}, REQUEST_AUDIO_CODE);
    }

    public void requestWriteExternalStoragePermission()
    {
        ActivityCompat.requestPermissions(mainActivityInterface.getActivity(), new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, WRITE_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE);
    }
}
