// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CheckDeviceStatusBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout barCodeActivity;

  @NonNull
  public final LinearLayout checkDeviceStatusQrBarCode;

  @NonNull
  public final TextView textAddDevicesPageHelp;

  @NonNull
  public final TextView textViewChangeDeviceStatusDeviceType;

  @NonNull
  public final TextView textViewCheckDeviceStatusBedName;

  @NonNull
  public final TextView textViewCheckDeviceStatusCheckingServer;

  @NonNull
  public final TextView textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel;

  @NonNull
  public final TextView textViewCheckDeviceStatusDeviceTypeLabel;

  @NonNull
  public final TextView textViewCheckDeviceStatusDeviceWardName;

  @NonNull
  public final TextView textViewDeviceBedNameLabel;

  @NonNull
  public final TextView textViewDeviceHumanReadableSerialNumber;

  @NonNull
  public final TextView textViewDeviceMacAddressLabel;

  @NonNull
  public final TextView textViewDeviceMacAddressNumber;

  @NonNull
  public final TextView textViewDeviceUseStatus;

  @NonNull
  public final TextView textViewDeviceWardNameLabel;

  private CheckDeviceStatusBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout barCodeActivity, @NonNull LinearLayout checkDeviceStatusQrBarCode,
      @NonNull TextView textAddDevicesPageHelp,
      @NonNull TextView textViewChangeDeviceStatusDeviceType,
      @NonNull TextView textViewCheckDeviceStatusBedName,
      @NonNull TextView textViewCheckDeviceStatusCheckingServer,
      @NonNull TextView textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel,
      @NonNull TextView textViewCheckDeviceStatusDeviceTypeLabel,
      @NonNull TextView textViewCheckDeviceStatusDeviceWardName,
      @NonNull TextView textViewDeviceBedNameLabel,
      @NonNull TextView textViewDeviceHumanReadableSerialNumber,
      @NonNull TextView textViewDeviceMacAddressLabel,
      @NonNull TextView textViewDeviceMacAddressNumber, @NonNull TextView textViewDeviceUseStatus,
      @NonNull TextView textViewDeviceWardNameLabel) {
    this.rootView = rootView;
    this.barCodeActivity = barCodeActivity;
    this.checkDeviceStatusQrBarCode = checkDeviceStatusQrBarCode;
    this.textAddDevicesPageHelp = textAddDevicesPageHelp;
    this.textViewChangeDeviceStatusDeviceType = textViewChangeDeviceStatusDeviceType;
    this.textViewCheckDeviceStatusBedName = textViewCheckDeviceStatusBedName;
    this.textViewCheckDeviceStatusCheckingServer = textViewCheckDeviceStatusCheckingServer;
    this.textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel = textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel;
    this.textViewCheckDeviceStatusDeviceTypeLabel = textViewCheckDeviceStatusDeviceTypeLabel;
    this.textViewCheckDeviceStatusDeviceWardName = textViewCheckDeviceStatusDeviceWardName;
    this.textViewDeviceBedNameLabel = textViewDeviceBedNameLabel;
    this.textViewDeviceHumanReadableSerialNumber = textViewDeviceHumanReadableSerialNumber;
    this.textViewDeviceMacAddressLabel = textViewDeviceMacAddressLabel;
    this.textViewDeviceMacAddressNumber = textViewDeviceMacAddressNumber;
    this.textViewDeviceUseStatus = textViewDeviceUseStatus;
    this.textViewDeviceWardNameLabel = textViewDeviceWardNameLabel;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CheckDeviceStatusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CheckDeviceStatusBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.check_device_status, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CheckDeviceStatusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout barCodeActivity = (LinearLayout) rootView;

      id = R.id.check_device_status_qr_bar_code;
      LinearLayout checkDeviceStatusQrBarCode = ViewBindings.findChildViewById(rootView, id);
      if (checkDeviceStatusQrBarCode == null) {
        break missingId;
      }

      id = R.id.textAddDevicesPageHelp;
      TextView textAddDevicesPageHelp = ViewBindings.findChildViewById(rootView, id);
      if (textAddDevicesPageHelp == null) {
        break missingId;
      }

      id = R.id.textViewChangeDeviceStatusDeviceType;
      TextView textViewChangeDeviceStatusDeviceType = ViewBindings.findChildViewById(rootView, id);
      if (textViewChangeDeviceStatusDeviceType == null) {
        break missingId;
      }

      id = R.id.textViewCheckDeviceStatusBedName;
      TextView textViewCheckDeviceStatusBedName = ViewBindings.findChildViewById(rootView, id);
      if (textViewCheckDeviceStatusBedName == null) {
        break missingId;
      }

      id = R.id.textViewCheckDeviceStatusCheckingServer;
      TextView textViewCheckDeviceStatusCheckingServer = ViewBindings.findChildViewById(rootView, id);
      if (textViewCheckDeviceStatusCheckingServer == null) {
        break missingId;
      }

      id = R.id.textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel;
      TextView textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel == null) {
        break missingId;
      }

      id = R.id.textViewCheckDeviceStatusDeviceTypeLabel;
      TextView textViewCheckDeviceStatusDeviceTypeLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewCheckDeviceStatusDeviceTypeLabel == null) {
        break missingId;
      }

      id = R.id.textViewCheckDeviceStatusDeviceWardName;
      TextView textViewCheckDeviceStatusDeviceWardName = ViewBindings.findChildViewById(rootView, id);
      if (textViewCheckDeviceStatusDeviceWardName == null) {
        break missingId;
      }

      id = R.id.textViewDeviceBedNameLabel;
      TextView textViewDeviceBedNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceBedNameLabel == null) {
        break missingId;
      }

      id = R.id.textViewDeviceHumanReadableSerialNumber;
      TextView textViewDeviceHumanReadableSerialNumber = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceHumanReadableSerialNumber == null) {
        break missingId;
      }

      id = R.id.textViewDeviceMacAddressLabel;
      TextView textViewDeviceMacAddressLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceMacAddressLabel == null) {
        break missingId;
      }

      id = R.id.textViewDeviceMacAddressNumber;
      TextView textViewDeviceMacAddressNumber = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceMacAddressNumber == null) {
        break missingId;
      }

      id = R.id.textViewDeviceUseStatus;
      TextView textViewDeviceUseStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceUseStatus == null) {
        break missingId;
      }

      id = R.id.textViewDeviceWardNameLabel;
      TextView textViewDeviceWardNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceWardNameLabel == null) {
        break missingId;
      }

      return new CheckDeviceStatusBinding((LinearLayout) rootView, barCodeActivity,
          checkDeviceStatusQrBarCode, textAddDevicesPageHelp, textViewChangeDeviceStatusDeviceType,
          textViewCheckDeviceStatusBedName, textViewCheckDeviceStatusCheckingServer,
          textViewCheckDeviceStatusDeviceHumanReadableSerialNumberLabel,
          textViewCheckDeviceStatusDeviceTypeLabel, textViewCheckDeviceStatusDeviceWardName,
          textViewDeviceBedNameLabel, textViewDeviceHumanReadableSerialNumber,
          textViewDeviceMacAddressLabel, textViewDeviceMacAddressNumber, textViewDeviceUseStatus,
          textViewDeviceWardNameLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
