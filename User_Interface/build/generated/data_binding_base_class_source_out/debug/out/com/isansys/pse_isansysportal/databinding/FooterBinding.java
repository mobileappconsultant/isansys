// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FooterBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonBack;

  @NonNull
  public final Button buttonDecreaseScreenBrightness;

  @NonNull
  public final Button buttonIncreaseScreenBrightness;

  @NonNull
  public final Button buttonLock;

  @NonNull
  public final Button buttonNext;

  @NonNull
  public final CheckBox checkBoxShowHideSetupModeBlobs;

  @NonNull
  public final LinearLayout diskSpaceBar;

  @NonNull
  public final LinearLayout footerRightSideTopLine;

  @NonNull
  public final ImageView imageBrightness;

  @NonNull
  public final ImageView imageDayOrNight;

  @NonNull
  public final ImageView imageFooterAndroidBattery;

  @NonNull
  public final ImageView imageFreeDiskSpacePercentage;

  @NonNull
  public final ImageView imageMedicalRecord;

  @NonNull
  public final ImageView imageServer;

  @NonNull
  public final ImageView imageSignalStrength;

  @NonNull
  public final ImageView imageWamp;

  @NonNull
  public final ImageView imageWebpages;

  @NonNull
  public final LinearLayout linearLayoutFooterDeveloperBits;

  @NonNull
  public final LinearLayout linearLayoutFooterServerLink;

  @NonNull
  public final RelativeLayout relativeLayoutBatteryDetails;

  @NonNull
  public final RelativeLayout relativeLayoutFooter;

  @NonNull
  public final RelativeLayout relativeLayoutServer;

  @NonNull
  public final RelativeLayout relativeLayoutSystemTime;

  @NonNull
  public final RelativeLayout relativeLayoutUserOptions;

  @NonNull
  public final RelativeLayout relativeLayoutWifiDetails;

  @NonNull
  public final LinearLayout screenBrightness;

  @NonNull
  public final SeekBar seekBarScreenBrightness;

  @NonNull
  public final ImageView smallSetupModeBlobSymbol;

  @NonNull
  public final TextView textHeaderGuiTime;

  @NonNull
  public final TextView textHeaderGuiTimeSmall;

  @NonNull
  public final TextView textViewFooterBatteryCurrent;

  @NonNull
  public final TextView textViewFooterBatteryPercentage;

  @NonNull
  public final TextView textViewFooterBatteryTemperature;

  @NonNull
  public final TextView textViewFooterBatteryVoltage;

  @NonNull
  public final TextView textViewFooterFreeDiskSpacePercentage;

  @NonNull
  public final View viewFooterServerStatus;

  @NonNull
  public final View viewFooterSystemStatus;

  @NonNull
  public final View viewFooterWampStatus;

  @NonNull
  public final LinearLayout wifiBatteryLayout;

  private FooterBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonBack,
      @NonNull Button buttonDecreaseScreenBrightness,
      @NonNull Button buttonIncreaseScreenBrightness, @NonNull Button buttonLock,
      @NonNull Button buttonNext, @NonNull CheckBox checkBoxShowHideSetupModeBlobs,
      @NonNull LinearLayout diskSpaceBar, @NonNull LinearLayout footerRightSideTopLine,
      @NonNull ImageView imageBrightness, @NonNull ImageView imageDayOrNight,
      @NonNull ImageView imageFooterAndroidBattery, @NonNull ImageView imageFreeDiskSpacePercentage,
      @NonNull ImageView imageMedicalRecord, @NonNull ImageView imageServer,
      @NonNull ImageView imageSignalStrength, @NonNull ImageView imageWamp,
      @NonNull ImageView imageWebpages, @NonNull LinearLayout linearLayoutFooterDeveloperBits,
      @NonNull LinearLayout linearLayoutFooterServerLink,
      @NonNull RelativeLayout relativeLayoutBatteryDetails,
      @NonNull RelativeLayout relativeLayoutFooter, @NonNull RelativeLayout relativeLayoutServer,
      @NonNull RelativeLayout relativeLayoutSystemTime,
      @NonNull RelativeLayout relativeLayoutUserOptions,
      @NonNull RelativeLayout relativeLayoutWifiDetails, @NonNull LinearLayout screenBrightness,
      @NonNull SeekBar seekBarScreenBrightness, @NonNull ImageView smallSetupModeBlobSymbol,
      @NonNull TextView textHeaderGuiTime, @NonNull TextView textHeaderGuiTimeSmall,
      @NonNull TextView textViewFooterBatteryCurrent,
      @NonNull TextView textViewFooterBatteryPercentage,
      @NonNull TextView textViewFooterBatteryTemperature,
      @NonNull TextView textViewFooterBatteryVoltage,
      @NonNull TextView textViewFooterFreeDiskSpacePercentage, @NonNull View viewFooterServerStatus,
      @NonNull View viewFooterSystemStatus, @NonNull View viewFooterWampStatus,
      @NonNull LinearLayout wifiBatteryLayout) {
    this.rootView = rootView;
    this.buttonBack = buttonBack;
    this.buttonDecreaseScreenBrightness = buttonDecreaseScreenBrightness;
    this.buttonIncreaseScreenBrightness = buttonIncreaseScreenBrightness;
    this.buttonLock = buttonLock;
    this.buttonNext = buttonNext;
    this.checkBoxShowHideSetupModeBlobs = checkBoxShowHideSetupModeBlobs;
    this.diskSpaceBar = diskSpaceBar;
    this.footerRightSideTopLine = footerRightSideTopLine;
    this.imageBrightness = imageBrightness;
    this.imageDayOrNight = imageDayOrNight;
    this.imageFooterAndroidBattery = imageFooterAndroidBattery;
    this.imageFreeDiskSpacePercentage = imageFreeDiskSpacePercentage;
    this.imageMedicalRecord = imageMedicalRecord;
    this.imageServer = imageServer;
    this.imageSignalStrength = imageSignalStrength;
    this.imageWamp = imageWamp;
    this.imageWebpages = imageWebpages;
    this.linearLayoutFooterDeveloperBits = linearLayoutFooterDeveloperBits;
    this.linearLayoutFooterServerLink = linearLayoutFooterServerLink;
    this.relativeLayoutBatteryDetails = relativeLayoutBatteryDetails;
    this.relativeLayoutFooter = relativeLayoutFooter;
    this.relativeLayoutServer = relativeLayoutServer;
    this.relativeLayoutSystemTime = relativeLayoutSystemTime;
    this.relativeLayoutUserOptions = relativeLayoutUserOptions;
    this.relativeLayoutWifiDetails = relativeLayoutWifiDetails;
    this.screenBrightness = screenBrightness;
    this.seekBarScreenBrightness = seekBarScreenBrightness;
    this.smallSetupModeBlobSymbol = smallSetupModeBlobSymbol;
    this.textHeaderGuiTime = textHeaderGuiTime;
    this.textHeaderGuiTimeSmall = textHeaderGuiTimeSmall;
    this.textViewFooterBatteryCurrent = textViewFooterBatteryCurrent;
    this.textViewFooterBatteryPercentage = textViewFooterBatteryPercentage;
    this.textViewFooterBatteryTemperature = textViewFooterBatteryTemperature;
    this.textViewFooterBatteryVoltage = textViewFooterBatteryVoltage;
    this.textViewFooterFreeDiskSpacePercentage = textViewFooterFreeDiskSpacePercentage;
    this.viewFooterServerStatus = viewFooterServerStatus;
    this.viewFooterSystemStatus = viewFooterSystemStatus;
    this.viewFooterWampStatus = viewFooterWampStatus;
    this.wifiBatteryLayout = wifiBatteryLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FooterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FooterBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.footer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FooterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonBack;
      Button buttonBack = ViewBindings.findChildViewById(rootView, id);
      if (buttonBack == null) {
        break missingId;
      }

      id = R.id.buttonDecreaseScreenBrightness;
      Button buttonDecreaseScreenBrightness = ViewBindings.findChildViewById(rootView, id);
      if (buttonDecreaseScreenBrightness == null) {
        break missingId;
      }

      id = R.id.buttonIncreaseScreenBrightness;
      Button buttonIncreaseScreenBrightness = ViewBindings.findChildViewById(rootView, id);
      if (buttonIncreaseScreenBrightness == null) {
        break missingId;
      }

      id = R.id.buttonLock;
      Button buttonLock = ViewBindings.findChildViewById(rootView, id);
      if (buttonLock == null) {
        break missingId;
      }

      id = R.id.buttonNext;
      Button buttonNext = ViewBindings.findChildViewById(rootView, id);
      if (buttonNext == null) {
        break missingId;
      }

      id = R.id.checkBoxShowHideSetupModeBlobs;
      CheckBox checkBoxShowHideSetupModeBlobs = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxShowHideSetupModeBlobs == null) {
        break missingId;
      }

      id = R.id.disk_space_bar;
      LinearLayout diskSpaceBar = ViewBindings.findChildViewById(rootView, id);
      if (diskSpaceBar == null) {
        break missingId;
      }

      id = R.id.footerRightSideTopLine;
      LinearLayout footerRightSideTopLine = ViewBindings.findChildViewById(rootView, id);
      if (footerRightSideTopLine == null) {
        break missingId;
      }

      id = R.id.imageBrightness;
      ImageView imageBrightness = ViewBindings.findChildViewById(rootView, id);
      if (imageBrightness == null) {
        break missingId;
      }

      id = R.id.imageDayOrNight;
      ImageView imageDayOrNight = ViewBindings.findChildViewById(rootView, id);
      if (imageDayOrNight == null) {
        break missingId;
      }

      id = R.id.imageFooterAndroidBattery;
      ImageView imageFooterAndroidBattery = ViewBindings.findChildViewById(rootView, id);
      if (imageFooterAndroidBattery == null) {
        break missingId;
      }

      id = R.id.imageFreeDiskSpacePercentage;
      ImageView imageFreeDiskSpacePercentage = ViewBindings.findChildViewById(rootView, id);
      if (imageFreeDiskSpacePercentage == null) {
        break missingId;
      }

      id = R.id.imageMedicalRecord;
      ImageView imageMedicalRecord = ViewBindings.findChildViewById(rootView, id);
      if (imageMedicalRecord == null) {
        break missingId;
      }

      id = R.id.imageServer;
      ImageView imageServer = ViewBindings.findChildViewById(rootView, id);
      if (imageServer == null) {
        break missingId;
      }

      id = R.id.imageSignalStrength;
      ImageView imageSignalStrength = ViewBindings.findChildViewById(rootView, id);
      if (imageSignalStrength == null) {
        break missingId;
      }

      id = R.id.imageWamp;
      ImageView imageWamp = ViewBindings.findChildViewById(rootView, id);
      if (imageWamp == null) {
        break missingId;
      }

      id = R.id.imageWebpages;
      ImageView imageWebpages = ViewBindings.findChildViewById(rootView, id);
      if (imageWebpages == null) {
        break missingId;
      }

      id = R.id.linearLayoutFooterDeveloperBits;
      LinearLayout linearLayoutFooterDeveloperBits = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutFooterDeveloperBits == null) {
        break missingId;
      }

      id = R.id.linearLayoutFooterServerLink;
      LinearLayout linearLayoutFooterServerLink = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutFooterServerLink == null) {
        break missingId;
      }

      id = R.id.relativeLayoutBatteryDetails;
      RelativeLayout relativeLayoutBatteryDetails = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutBatteryDetails == null) {
        break missingId;
      }

      RelativeLayout relativeLayoutFooter = (RelativeLayout) rootView;

      id = R.id.relativeLayoutServer;
      RelativeLayout relativeLayoutServer = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutServer == null) {
        break missingId;
      }

      id = R.id.relativeLayoutSystemTime;
      RelativeLayout relativeLayoutSystemTime = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutSystemTime == null) {
        break missingId;
      }

      id = R.id.relativeLayoutUserOptions;
      RelativeLayout relativeLayoutUserOptions = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutUserOptions == null) {
        break missingId;
      }

      id = R.id.relativeLayoutWifiDetails;
      RelativeLayout relativeLayoutWifiDetails = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayoutWifiDetails == null) {
        break missingId;
      }

      id = R.id.screenBrightness;
      LinearLayout screenBrightness = ViewBindings.findChildViewById(rootView, id);
      if (screenBrightness == null) {
        break missingId;
      }

      id = R.id.seekBarScreenBrightness;
      SeekBar seekBarScreenBrightness = ViewBindings.findChildViewById(rootView, id);
      if (seekBarScreenBrightness == null) {
        break missingId;
      }

      id = R.id.smallSetupModeBlobSymbol;
      ImageView smallSetupModeBlobSymbol = ViewBindings.findChildViewById(rootView, id);
      if (smallSetupModeBlobSymbol == null) {
        break missingId;
      }

      id = R.id.textHeaderGuiTime;
      TextView textHeaderGuiTime = ViewBindings.findChildViewById(rootView, id);
      if (textHeaderGuiTime == null) {
        break missingId;
      }

      id = R.id.textHeaderGuiTimeSmall;
      TextView textHeaderGuiTimeSmall = ViewBindings.findChildViewById(rootView, id);
      if (textHeaderGuiTimeSmall == null) {
        break missingId;
      }

      id = R.id.textViewFooterBatteryCurrent;
      TextView textViewFooterBatteryCurrent = ViewBindings.findChildViewById(rootView, id);
      if (textViewFooterBatteryCurrent == null) {
        break missingId;
      }

      id = R.id.textViewFooterBatteryPercentage;
      TextView textViewFooterBatteryPercentage = ViewBindings.findChildViewById(rootView, id);
      if (textViewFooterBatteryPercentage == null) {
        break missingId;
      }

      id = R.id.textViewFooterBatteryTemperature;
      TextView textViewFooterBatteryTemperature = ViewBindings.findChildViewById(rootView, id);
      if (textViewFooterBatteryTemperature == null) {
        break missingId;
      }

      id = R.id.textViewFooterBatteryVoltage;
      TextView textViewFooterBatteryVoltage = ViewBindings.findChildViewById(rootView, id);
      if (textViewFooterBatteryVoltage == null) {
        break missingId;
      }

      id = R.id.textViewFooterFreeDiskSpacePercentage;
      TextView textViewFooterFreeDiskSpacePercentage = ViewBindings.findChildViewById(rootView, id);
      if (textViewFooterFreeDiskSpacePercentage == null) {
        break missingId;
      }

      id = R.id.viewFooterServerStatus;
      View viewFooterServerStatus = ViewBindings.findChildViewById(rootView, id);
      if (viewFooterServerStatus == null) {
        break missingId;
      }

      id = R.id.viewFooterSystemStatus;
      View viewFooterSystemStatus = ViewBindings.findChildViewById(rootView, id);
      if (viewFooterSystemStatus == null) {
        break missingId;
      }

      id = R.id.viewFooterWampStatus;
      View viewFooterWampStatus = ViewBindings.findChildViewById(rootView, id);
      if (viewFooterWampStatus == null) {
        break missingId;
      }

      id = R.id.wifi_battery_layout;
      LinearLayout wifiBatteryLayout = ViewBindings.findChildViewById(rootView, id);
      if (wifiBatteryLayout == null) {
        break missingId;
      }

      return new FooterBinding((RelativeLayout) rootView, buttonBack,
          buttonDecreaseScreenBrightness, buttonIncreaseScreenBrightness, buttonLock, buttonNext,
          checkBoxShowHideSetupModeBlobs, diskSpaceBar, footerRightSideTopLine, imageBrightness,
          imageDayOrNight, imageFooterAndroidBattery, imageFreeDiskSpacePercentage,
          imageMedicalRecord, imageServer, imageSignalStrength, imageWamp, imageWebpages,
          linearLayoutFooterDeveloperBits, linearLayoutFooterServerLink,
          relativeLayoutBatteryDetails, relativeLayoutFooter, relativeLayoutServer,
          relativeLayoutSystemTime, relativeLayoutUserOptions, relativeLayoutWifiDetails,
          screenBrightness, seekBarScreenBrightness, smallSetupModeBlobSymbol, textHeaderGuiTime,
          textHeaderGuiTimeSmall, textViewFooterBatteryCurrent, textViewFooterBatteryPercentage,
          textViewFooterBatteryTemperature, textViewFooterBatteryVoltage,
          textViewFooterFreeDiskSpacePercentage, viewFooterServerStatus, viewFooterSystemStatus,
          viewFooterWampStatus, wifiBatteryLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
