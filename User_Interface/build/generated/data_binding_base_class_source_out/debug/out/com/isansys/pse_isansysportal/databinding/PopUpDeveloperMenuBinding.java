// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PopUpDeveloperMenuBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonCrashPatientGatewayOnDemand;

  @NonNull
  public final Button buttonCrashUserInterfaceOnDemand;

  @NonNull
  public final Button buttonDeveloperPopupDismiss;

  @NonNull
  public final Button buttonDisableBluetoothAdapter;

  @NonNull
  public final Button buttonDisableServerSyncingTestMode;

  @NonNull
  public final Button buttonDisableWifi;

  @NonNull
  public final Button buttonEnableBluetoothAdapter;

  @NonNull
  public final Button buttonEnableServerSyncingTestMode;

  @NonNull
  public final Button buttonEnableWifi;

  @NonNull
  public final Button buttonRemoveDevicesAndResetBluetooth;

  @NonNull
  public final Button buttonResetBluetooth;

  @NonNull
  public final Button buttonResetDatabaseFailedtoSendStatus;

  @NonNull
  public final Button buttonStartNoninBlePlaybackFromFile;

  @NonNull
  public final TextView textViewPostBleResetWithoutRemovingDevices;

  @NonNull
  public final TextView textViewPostCompleteBleReset;

  private PopUpDeveloperMenuBinding(@NonNull LinearLayout rootView,
      @NonNull Button buttonCrashPatientGatewayOnDemand,
      @NonNull Button buttonCrashUserInterfaceOnDemand, @NonNull Button buttonDeveloperPopupDismiss,
      @NonNull Button buttonDisableBluetoothAdapter,
      @NonNull Button buttonDisableServerSyncingTestMode, @NonNull Button buttonDisableWifi,
      @NonNull Button buttonEnableBluetoothAdapter,
      @NonNull Button buttonEnableServerSyncingTestMode, @NonNull Button buttonEnableWifi,
      @NonNull Button buttonRemoveDevicesAndResetBluetooth, @NonNull Button buttonResetBluetooth,
      @NonNull Button buttonResetDatabaseFailedtoSendStatus,
      @NonNull Button buttonStartNoninBlePlaybackFromFile,
      @NonNull TextView textViewPostBleResetWithoutRemovingDevices,
      @NonNull TextView textViewPostCompleteBleReset) {
    this.rootView = rootView;
    this.buttonCrashPatientGatewayOnDemand = buttonCrashPatientGatewayOnDemand;
    this.buttonCrashUserInterfaceOnDemand = buttonCrashUserInterfaceOnDemand;
    this.buttonDeveloperPopupDismiss = buttonDeveloperPopupDismiss;
    this.buttonDisableBluetoothAdapter = buttonDisableBluetoothAdapter;
    this.buttonDisableServerSyncingTestMode = buttonDisableServerSyncingTestMode;
    this.buttonDisableWifi = buttonDisableWifi;
    this.buttonEnableBluetoothAdapter = buttonEnableBluetoothAdapter;
    this.buttonEnableServerSyncingTestMode = buttonEnableServerSyncingTestMode;
    this.buttonEnableWifi = buttonEnableWifi;
    this.buttonRemoveDevicesAndResetBluetooth = buttonRemoveDevicesAndResetBluetooth;
    this.buttonResetBluetooth = buttonResetBluetooth;
    this.buttonResetDatabaseFailedtoSendStatus = buttonResetDatabaseFailedtoSendStatus;
    this.buttonStartNoninBlePlaybackFromFile = buttonStartNoninBlePlaybackFromFile;
    this.textViewPostBleResetWithoutRemovingDevices = textViewPostBleResetWithoutRemovingDevices;
    this.textViewPostCompleteBleReset = textViewPostCompleteBleReset;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PopUpDeveloperMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PopUpDeveloperMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.pop_up_developer_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PopUpDeveloperMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonCrashPatientGatewayOnDemand;
      Button buttonCrashPatientGatewayOnDemand = ViewBindings.findChildViewById(rootView, id);
      if (buttonCrashPatientGatewayOnDemand == null) {
        break missingId;
      }

      id = R.id.buttonCrashUserInterfaceOnDemand;
      Button buttonCrashUserInterfaceOnDemand = ViewBindings.findChildViewById(rootView, id);
      if (buttonCrashUserInterfaceOnDemand == null) {
        break missingId;
      }

      id = R.id.button_developer_popup_dismiss;
      Button buttonDeveloperPopupDismiss = ViewBindings.findChildViewById(rootView, id);
      if (buttonDeveloperPopupDismiss == null) {
        break missingId;
      }

      id = R.id.buttonDisableBluetoothAdapter;
      Button buttonDisableBluetoothAdapter = ViewBindings.findChildViewById(rootView, id);
      if (buttonDisableBluetoothAdapter == null) {
        break missingId;
      }

      id = R.id.buttonDisableServerSyncingTestMode;
      Button buttonDisableServerSyncingTestMode = ViewBindings.findChildViewById(rootView, id);
      if (buttonDisableServerSyncingTestMode == null) {
        break missingId;
      }

      id = R.id.buttonDisableWifi;
      Button buttonDisableWifi = ViewBindings.findChildViewById(rootView, id);
      if (buttonDisableWifi == null) {
        break missingId;
      }

      id = R.id.buttonEnableBluetoothAdapter;
      Button buttonEnableBluetoothAdapter = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableBluetoothAdapter == null) {
        break missingId;
      }

      id = R.id.buttonEnableServerSyncingTestMode;
      Button buttonEnableServerSyncingTestMode = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableServerSyncingTestMode == null) {
        break missingId;
      }

      id = R.id.buttonEnableWifi;
      Button buttonEnableWifi = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableWifi == null) {
        break missingId;
      }

      id = R.id.buttonRemoveDevicesAndResetBluetooth;
      Button buttonRemoveDevicesAndResetBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (buttonRemoveDevicesAndResetBluetooth == null) {
        break missingId;
      }

      id = R.id.buttonResetBluetooth;
      Button buttonResetBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (buttonResetBluetooth == null) {
        break missingId;
      }

      id = R.id.buttonResetDatabaseFailedtoSendStatus;
      Button buttonResetDatabaseFailedtoSendStatus = ViewBindings.findChildViewById(rootView, id);
      if (buttonResetDatabaseFailedtoSendStatus == null) {
        break missingId;
      }

      id = R.id.buttonStartNoninBlePlaybackFromFile;
      Button buttonStartNoninBlePlaybackFromFile = ViewBindings.findChildViewById(rootView, id);
      if (buttonStartNoninBlePlaybackFromFile == null) {
        break missingId;
      }

      id = R.id.textViewPostBleResetWithoutRemovingDevices;
      TextView textViewPostBleResetWithoutRemovingDevices = ViewBindings.findChildViewById(rootView, id);
      if (textViewPostBleResetWithoutRemovingDevices == null) {
        break missingId;
      }

      id = R.id.textViewPostCompleteBleReset;
      TextView textViewPostCompleteBleReset = ViewBindings.findChildViewById(rootView, id);
      if (textViewPostCompleteBleReset == null) {
        break missingId;
      }

      return new PopUpDeveloperMenuBinding((LinearLayout) rootView,
          buttonCrashPatientGatewayOnDemand, buttonCrashUserInterfaceOnDemand,
          buttonDeveloperPopupDismiss, buttonDisableBluetoothAdapter,
          buttonDisableServerSyncingTestMode, buttonDisableWifi, buttonEnableBluetoothAdapter,
          buttonEnableServerSyncingTestMode, buttonEnableWifi, buttonRemoveDevicesAndResetBluetooth,
          buttonResetBluetooth, buttonResetDatabaseFailedtoSendStatus,
          buttonStartNoninBlePlaybackFromFile, textViewPostBleResetWithoutRemovingDevices,
          textViewPostCompleteBleReset);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
