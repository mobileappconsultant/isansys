// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.AutoResizeTextView;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AnnotationConfirmationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonBigButtonBottom;

  @NonNull
  public final Button buttonBigButtonTop;

  @NonNull
  public final TableLayout tableLayoutKeyboardAnnotationTable;

  @NonNull
  public final TableLayout tableLayoutPredefinedAnnotationTable;

  @NonNull
  public final AutoResizeTextView textAnnotationAction;

  @NonNull
  public final AutoResizeTextView textAnnotationCondition;

  @NonNull
  public final AutoResizeTextView textAnnotationOutcome;

  @NonNull
  public final AutoResizeTextView textKeyboardAnnotation;

  @NonNull
  public final TextView textKeyboardAnnotationTime;

  private AnnotationConfirmationBinding(@NonNull LinearLayout rootView,
      @NonNull Button buttonBigButtonBottom, @NonNull Button buttonBigButtonTop,
      @NonNull TableLayout tableLayoutKeyboardAnnotationTable,
      @NonNull TableLayout tableLayoutPredefinedAnnotationTable,
      @NonNull AutoResizeTextView textAnnotationAction,
      @NonNull AutoResizeTextView textAnnotationCondition,
      @NonNull AutoResizeTextView textAnnotationOutcome,
      @NonNull AutoResizeTextView textKeyboardAnnotation,
      @NonNull TextView textKeyboardAnnotationTime) {
    this.rootView = rootView;
    this.buttonBigButtonBottom = buttonBigButtonBottom;
    this.buttonBigButtonTop = buttonBigButtonTop;
    this.tableLayoutKeyboardAnnotationTable = tableLayoutKeyboardAnnotationTable;
    this.tableLayoutPredefinedAnnotationTable = tableLayoutPredefinedAnnotationTable;
    this.textAnnotationAction = textAnnotationAction;
    this.textAnnotationCondition = textAnnotationCondition;
    this.textAnnotationOutcome = textAnnotationOutcome;
    this.textKeyboardAnnotation = textKeyboardAnnotation;
    this.textKeyboardAnnotationTime = textKeyboardAnnotationTime;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AnnotationConfirmationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AnnotationConfirmationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.annotation_confirmation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AnnotationConfirmationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonBigButtonBottom;
      Button buttonBigButtonBottom = ViewBindings.findChildViewById(rootView, id);
      if (buttonBigButtonBottom == null) {
        break missingId;
      }

      id = R.id.buttonBigButtonTop;
      Button buttonBigButtonTop = ViewBindings.findChildViewById(rootView, id);
      if (buttonBigButtonTop == null) {
        break missingId;
      }

      id = R.id.tableLayoutKeyboardAnnotationTable;
      TableLayout tableLayoutKeyboardAnnotationTable = ViewBindings.findChildViewById(rootView, id);
      if (tableLayoutKeyboardAnnotationTable == null) {
        break missingId;
      }

      id = R.id.tableLayoutPredefinedAnnotationTable;
      TableLayout tableLayoutPredefinedAnnotationTable = ViewBindings.findChildViewById(rootView, id);
      if (tableLayoutPredefinedAnnotationTable == null) {
        break missingId;
      }

      id = R.id.textAnnotationAction;
      AutoResizeTextView textAnnotationAction = ViewBindings.findChildViewById(rootView, id);
      if (textAnnotationAction == null) {
        break missingId;
      }

      id = R.id.textAnnotationCondition;
      AutoResizeTextView textAnnotationCondition = ViewBindings.findChildViewById(rootView, id);
      if (textAnnotationCondition == null) {
        break missingId;
      }

      id = R.id.textAnnotationOutcome;
      AutoResizeTextView textAnnotationOutcome = ViewBindings.findChildViewById(rootView, id);
      if (textAnnotationOutcome == null) {
        break missingId;
      }

      id = R.id.textKeyboardAnnotation;
      AutoResizeTextView textKeyboardAnnotation = ViewBindings.findChildViewById(rootView, id);
      if (textKeyboardAnnotation == null) {
        break missingId;
      }

      id = R.id.textKeyboardAnnotationTime;
      TextView textKeyboardAnnotationTime = ViewBindings.findChildViewById(rootView, id);
      if (textKeyboardAnnotationTime == null) {
        break missingId;
      }

      return new AnnotationConfirmationBinding((LinearLayout) rootView, buttonBigButtonBottom,
          buttonBigButtonTop, tableLayoutKeyboardAnnotationTable,
          tableLayoutPredefinedAnnotationTable, textAnnotationAction, textAnnotationCondition,
          textAnnotationOutcome, textKeyboardAnnotation, textKeyboardAnnotationTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
