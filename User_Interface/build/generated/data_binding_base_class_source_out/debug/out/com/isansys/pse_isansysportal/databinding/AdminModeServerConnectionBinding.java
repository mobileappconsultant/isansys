// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdminModeServerConnectionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button ButtonLogCat;

  @NonNull
  public final Button ButtonNTPSync;

  @NonNull
  public final ImageButton buttonChangeWifi;

  @NonNull
  public final Button buttonCheckForUpdatedFirmware;

  @NonNull
  public final Button buttonDeleteEarlyWarningScoreThresholdSets;

  @NonNull
  public final Button buttonDeleteOldExportedDatabases;

  @NonNull
  public final Button buttonEmptyLocalDatabase;

  @NonNull
  public final Button buttonExportLocalDatabase;

  @NonNull
  public final Button buttonForceInstallationComplete;

  @NonNull
  public final Button buttonGetDefaultEarlyWarningScoringTypesFromServer;

  @NonNull
  public final Button buttonGetGatewayConfigFromServer;

  @NonNull
  public final Button buttonGetServerConfigurableTextFromServer;

  @NonNull
  public final Button buttonGetViewableWebpagesFromServer;

  @NonNull
  public final Button buttonGetWardsAndBedsFromServer;

  @NonNull
  public final Button buttonRestartInstallationWizard;

  @NonNull
  public final Button buttonSetBedDetails;

  @NonNull
  public final Button buttonSetRealTimeServerPort;

  @NonNull
  public final Button buttonSetServer;

  @NonNull
  public final Button buttonSetServerPort;

  @NonNull
  public final Button buttonTestServerLink;

  @NonNull
  public final CheckBox checkBoxEnableRealTimeLink;

  @NonNull
  public final CheckBox checkBoxServerDataSyncEnabled;

  @NonNull
  public final CheckBox checkBoxUseHttps;

  @NonNull
  public final CheckBox checkBoxUseWebServiceAuthentication;

  @NonNull
  public final CheckBox checkBoxUseWebServiceEncryption;

  @NonNull
  public final EditText editRealTimeServerPort;

  @NonNull
  public final EditText editServerAddress;

  @NonNull
  public final EditText editServerPort;

  @NonNull
  public final TextView labelSetBedID;

  @NonNull
  public final TextView labelSetRealTimeServerPort;

  @NonNull
  public final TextView labelSetServerAddress;

  @NonNull
  public final TextView labelSetServerPort;

  @NonNull
  public final LinearLayout linearLayoutAdminRestartInstallationWizard;

  @NonNull
  public final LinearLayout linearLayoutAdminServerPingStatus;

  @NonNull
  public final LinearLayout linearLayoutAdminServerPingStatusColour;

  @NonNull
  public final LinearLayout linearLayoutGetDefaultEarlyWaringScoreTypesFromServer;

  @NonNull
  public final LinearLayout linearLayoutGettingUpdatesFromServer;

  @NonNull
  public final LinearLayout linearLayoutServerSyncAndRealTimeLink;

  @NonNull
  public final LinearLayout linearLayoutTestServerLink;

  @NonNull
  public final ProgressBar progressBarGetUpdatedDeviceFirmware;

  @NonNull
  public final ProgressBar progressBarGettingUpdatesFromServer;

  @NonNull
  public final Spinner spinnerBedList;

  @NonNull
  public final Spinner spinnerWardList;

  @NonNull
  public final TextView textAdminModeGatewaysAssignedBedId;

  @NonNull
  public final TextView textReceivedDefaultEarlyWarningScoringTypes;

  @NonNull
  public final TextView textReceivedUpdateFirmwareVersions;

  @NonNull
  public final TextView textViewTimeDriftValue;

  @NonNull
  public final View viewReceivedGatewayConfig;

  @NonNull
  public final View viewReceivedServerConfigurableTextFromServer;

  @NonNull
  public final View viewReceivedWebpageFromServer;

  private AdminModeServerConnectionBinding(@NonNull LinearLayout rootView,
      @NonNull Button ButtonLogCat, @NonNull Button ButtonNTPSync,
      @NonNull ImageButton buttonChangeWifi, @NonNull Button buttonCheckForUpdatedFirmware,
      @NonNull Button buttonDeleteEarlyWarningScoreThresholdSets,
      @NonNull Button buttonDeleteOldExportedDatabases, @NonNull Button buttonEmptyLocalDatabase,
      @NonNull Button buttonExportLocalDatabase, @NonNull Button buttonForceInstallationComplete,
      @NonNull Button buttonGetDefaultEarlyWarningScoringTypesFromServer,
      @NonNull Button buttonGetGatewayConfigFromServer,
      @NonNull Button buttonGetServerConfigurableTextFromServer,
      @NonNull Button buttonGetViewableWebpagesFromServer,
      @NonNull Button buttonGetWardsAndBedsFromServer,
      @NonNull Button buttonRestartInstallationWizard, @NonNull Button buttonSetBedDetails,
      @NonNull Button buttonSetRealTimeServerPort, @NonNull Button buttonSetServer,
      @NonNull Button buttonSetServerPort, @NonNull Button buttonTestServerLink,
      @NonNull CheckBox checkBoxEnableRealTimeLink, @NonNull CheckBox checkBoxServerDataSyncEnabled,
      @NonNull CheckBox checkBoxUseHttps, @NonNull CheckBox checkBoxUseWebServiceAuthentication,
      @NonNull CheckBox checkBoxUseWebServiceEncryption, @NonNull EditText editRealTimeServerPort,
      @NonNull EditText editServerAddress, @NonNull EditText editServerPort,
      @NonNull TextView labelSetBedID, @NonNull TextView labelSetRealTimeServerPort,
      @NonNull TextView labelSetServerAddress, @NonNull TextView labelSetServerPort,
      @NonNull LinearLayout linearLayoutAdminRestartInstallationWizard,
      @NonNull LinearLayout linearLayoutAdminServerPingStatus,
      @NonNull LinearLayout linearLayoutAdminServerPingStatusColour,
      @NonNull LinearLayout linearLayoutGetDefaultEarlyWaringScoreTypesFromServer,
      @NonNull LinearLayout linearLayoutGettingUpdatesFromServer,
      @NonNull LinearLayout linearLayoutServerSyncAndRealTimeLink,
      @NonNull LinearLayout linearLayoutTestServerLink,
      @NonNull ProgressBar progressBarGetUpdatedDeviceFirmware,
      @NonNull ProgressBar progressBarGettingUpdatesFromServer, @NonNull Spinner spinnerBedList,
      @NonNull Spinner spinnerWardList, @NonNull TextView textAdminModeGatewaysAssignedBedId,
      @NonNull TextView textReceivedDefaultEarlyWarningScoringTypes,
      @NonNull TextView textReceivedUpdateFirmwareVersions,
      @NonNull TextView textViewTimeDriftValue, @NonNull View viewReceivedGatewayConfig,
      @NonNull View viewReceivedServerConfigurableTextFromServer,
      @NonNull View viewReceivedWebpageFromServer) {
    this.rootView = rootView;
    this.ButtonLogCat = ButtonLogCat;
    this.ButtonNTPSync = ButtonNTPSync;
    this.buttonChangeWifi = buttonChangeWifi;
    this.buttonCheckForUpdatedFirmware = buttonCheckForUpdatedFirmware;
    this.buttonDeleteEarlyWarningScoreThresholdSets = buttonDeleteEarlyWarningScoreThresholdSets;
    this.buttonDeleteOldExportedDatabases = buttonDeleteOldExportedDatabases;
    this.buttonEmptyLocalDatabase = buttonEmptyLocalDatabase;
    this.buttonExportLocalDatabase = buttonExportLocalDatabase;
    this.buttonForceInstallationComplete = buttonForceInstallationComplete;
    this.buttonGetDefaultEarlyWarningScoringTypesFromServer = buttonGetDefaultEarlyWarningScoringTypesFromServer;
    this.buttonGetGatewayConfigFromServer = buttonGetGatewayConfigFromServer;
    this.buttonGetServerConfigurableTextFromServer = buttonGetServerConfigurableTextFromServer;
    this.buttonGetViewableWebpagesFromServer = buttonGetViewableWebpagesFromServer;
    this.buttonGetWardsAndBedsFromServer = buttonGetWardsAndBedsFromServer;
    this.buttonRestartInstallationWizard = buttonRestartInstallationWizard;
    this.buttonSetBedDetails = buttonSetBedDetails;
    this.buttonSetRealTimeServerPort = buttonSetRealTimeServerPort;
    this.buttonSetServer = buttonSetServer;
    this.buttonSetServerPort = buttonSetServerPort;
    this.buttonTestServerLink = buttonTestServerLink;
    this.checkBoxEnableRealTimeLink = checkBoxEnableRealTimeLink;
    this.checkBoxServerDataSyncEnabled = checkBoxServerDataSyncEnabled;
    this.checkBoxUseHttps = checkBoxUseHttps;
    this.checkBoxUseWebServiceAuthentication = checkBoxUseWebServiceAuthentication;
    this.checkBoxUseWebServiceEncryption = checkBoxUseWebServiceEncryption;
    this.editRealTimeServerPort = editRealTimeServerPort;
    this.editServerAddress = editServerAddress;
    this.editServerPort = editServerPort;
    this.labelSetBedID = labelSetBedID;
    this.labelSetRealTimeServerPort = labelSetRealTimeServerPort;
    this.labelSetServerAddress = labelSetServerAddress;
    this.labelSetServerPort = labelSetServerPort;
    this.linearLayoutAdminRestartInstallationWizard = linearLayoutAdminRestartInstallationWizard;
    this.linearLayoutAdminServerPingStatus = linearLayoutAdminServerPingStatus;
    this.linearLayoutAdminServerPingStatusColour = linearLayoutAdminServerPingStatusColour;
    this.linearLayoutGetDefaultEarlyWaringScoreTypesFromServer = linearLayoutGetDefaultEarlyWaringScoreTypesFromServer;
    this.linearLayoutGettingUpdatesFromServer = linearLayoutGettingUpdatesFromServer;
    this.linearLayoutServerSyncAndRealTimeLink = linearLayoutServerSyncAndRealTimeLink;
    this.linearLayoutTestServerLink = linearLayoutTestServerLink;
    this.progressBarGetUpdatedDeviceFirmware = progressBarGetUpdatedDeviceFirmware;
    this.progressBarGettingUpdatesFromServer = progressBarGettingUpdatesFromServer;
    this.spinnerBedList = spinnerBedList;
    this.spinnerWardList = spinnerWardList;
    this.textAdminModeGatewaysAssignedBedId = textAdminModeGatewaysAssignedBedId;
    this.textReceivedDefaultEarlyWarningScoringTypes = textReceivedDefaultEarlyWarningScoringTypes;
    this.textReceivedUpdateFirmwareVersions = textReceivedUpdateFirmwareVersions;
    this.textViewTimeDriftValue = textViewTimeDriftValue;
    this.viewReceivedGatewayConfig = viewReceivedGatewayConfig;
    this.viewReceivedServerConfigurableTextFromServer = viewReceivedServerConfigurableTextFromServer;
    this.viewReceivedWebpageFromServer = viewReceivedWebpageFromServer;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdminModeServerConnectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdminModeServerConnectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.admin_mode_server_connection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdminModeServerConnectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ButtonLogCat;
      Button ButtonLogCat = ViewBindings.findChildViewById(rootView, id);
      if (ButtonLogCat == null) {
        break missingId;
      }

      id = R.id.ButtonNTPSync;
      Button ButtonNTPSync = ViewBindings.findChildViewById(rootView, id);
      if (ButtonNTPSync == null) {
        break missingId;
      }

      id = R.id.buttonChangeWifi;
      ImageButton buttonChangeWifi = ViewBindings.findChildViewById(rootView, id);
      if (buttonChangeWifi == null) {
        break missingId;
      }

      id = R.id.buttonCheckForUpdatedFirmware;
      Button buttonCheckForUpdatedFirmware = ViewBindings.findChildViewById(rootView, id);
      if (buttonCheckForUpdatedFirmware == null) {
        break missingId;
      }

      id = R.id.buttonDeleteEarlyWarningScoreThresholdSets;
      Button buttonDeleteEarlyWarningScoreThresholdSets = ViewBindings.findChildViewById(rootView, id);
      if (buttonDeleteEarlyWarningScoreThresholdSets == null) {
        break missingId;
      }

      id = R.id.buttonDeleteOldExportedDatabases;
      Button buttonDeleteOldExportedDatabases = ViewBindings.findChildViewById(rootView, id);
      if (buttonDeleteOldExportedDatabases == null) {
        break missingId;
      }

      id = R.id.buttonEmptyLocalDatabase;
      Button buttonEmptyLocalDatabase = ViewBindings.findChildViewById(rootView, id);
      if (buttonEmptyLocalDatabase == null) {
        break missingId;
      }

      id = R.id.buttonExportLocalDatabase;
      Button buttonExportLocalDatabase = ViewBindings.findChildViewById(rootView, id);
      if (buttonExportLocalDatabase == null) {
        break missingId;
      }

      id = R.id.buttonForceInstallationComplete;
      Button buttonForceInstallationComplete = ViewBindings.findChildViewById(rootView, id);
      if (buttonForceInstallationComplete == null) {
        break missingId;
      }

      id = R.id.buttonGetDefaultEarlyWarningScoringTypesFromServer;
      Button buttonGetDefaultEarlyWarningScoringTypesFromServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetDefaultEarlyWarningScoringTypesFromServer == null) {
        break missingId;
      }

      id = R.id.buttonGetGatewayConfigFromServer;
      Button buttonGetGatewayConfigFromServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetGatewayConfigFromServer == null) {
        break missingId;
      }

      id = R.id.buttonGetServerConfigurableTextFromServer;
      Button buttonGetServerConfigurableTextFromServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetServerConfigurableTextFromServer == null) {
        break missingId;
      }

      id = R.id.buttonGetViewableWebpagesFromServer;
      Button buttonGetViewableWebpagesFromServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetViewableWebpagesFromServer == null) {
        break missingId;
      }

      id = R.id.buttonGetWardsAndBedsFromServer;
      Button buttonGetWardsAndBedsFromServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetWardsAndBedsFromServer == null) {
        break missingId;
      }

      id = R.id.buttonRestartInstallationWizard;
      Button buttonRestartInstallationWizard = ViewBindings.findChildViewById(rootView, id);
      if (buttonRestartInstallationWizard == null) {
        break missingId;
      }

      id = R.id.buttonSetBedDetails;
      Button buttonSetBedDetails = ViewBindings.findChildViewById(rootView, id);
      if (buttonSetBedDetails == null) {
        break missingId;
      }

      id = R.id.buttonSetRealTimeServerPort;
      Button buttonSetRealTimeServerPort = ViewBindings.findChildViewById(rootView, id);
      if (buttonSetRealTimeServerPort == null) {
        break missingId;
      }

      id = R.id.buttonSetServer;
      Button buttonSetServer = ViewBindings.findChildViewById(rootView, id);
      if (buttonSetServer == null) {
        break missingId;
      }

      id = R.id.buttonSetServerPort;
      Button buttonSetServerPort = ViewBindings.findChildViewById(rootView, id);
      if (buttonSetServerPort == null) {
        break missingId;
      }

      id = R.id.buttonTestServerLink;
      Button buttonTestServerLink = ViewBindings.findChildViewById(rootView, id);
      if (buttonTestServerLink == null) {
        break missingId;
      }

      id = R.id.checkBoxEnableRealTimeLink;
      CheckBox checkBoxEnableRealTimeLink = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxEnableRealTimeLink == null) {
        break missingId;
      }

      id = R.id.checkBoxServerDataSyncEnabled;
      CheckBox checkBoxServerDataSyncEnabled = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxServerDataSyncEnabled == null) {
        break missingId;
      }

      id = R.id.checkBoxUseHttps;
      CheckBox checkBoxUseHttps = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxUseHttps == null) {
        break missingId;
      }

      id = R.id.checkBoxUseWebServiceAuthentication;
      CheckBox checkBoxUseWebServiceAuthentication = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxUseWebServiceAuthentication == null) {
        break missingId;
      }

      id = R.id.checkBoxUseWebServiceEncryption;
      CheckBox checkBoxUseWebServiceEncryption = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxUseWebServiceEncryption == null) {
        break missingId;
      }

      id = R.id.editRealTimeServerPort;
      EditText editRealTimeServerPort = ViewBindings.findChildViewById(rootView, id);
      if (editRealTimeServerPort == null) {
        break missingId;
      }

      id = R.id.editServerAddress;
      EditText editServerAddress = ViewBindings.findChildViewById(rootView, id);
      if (editServerAddress == null) {
        break missingId;
      }

      id = R.id.editServerPort;
      EditText editServerPort = ViewBindings.findChildViewById(rootView, id);
      if (editServerPort == null) {
        break missingId;
      }

      id = R.id.labelSetBedID;
      TextView labelSetBedID = ViewBindings.findChildViewById(rootView, id);
      if (labelSetBedID == null) {
        break missingId;
      }

      id = R.id.labelSetRealTimeServerPort;
      TextView labelSetRealTimeServerPort = ViewBindings.findChildViewById(rootView, id);
      if (labelSetRealTimeServerPort == null) {
        break missingId;
      }

      id = R.id.labelSetServerAddress;
      TextView labelSetServerAddress = ViewBindings.findChildViewById(rootView, id);
      if (labelSetServerAddress == null) {
        break missingId;
      }

      id = R.id.labelSetServerPort;
      TextView labelSetServerPort = ViewBindings.findChildViewById(rootView, id);
      if (labelSetServerPort == null) {
        break missingId;
      }

      id = R.id.linearLayoutAdminRestartInstallationWizard;
      LinearLayout linearLayoutAdminRestartInstallationWizard = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutAdminRestartInstallationWizard == null) {
        break missingId;
      }

      id = R.id.linearLayoutAdminServerPingStatus;
      LinearLayout linearLayoutAdminServerPingStatus = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutAdminServerPingStatus == null) {
        break missingId;
      }

      id = R.id.linearLayoutAdminServerPingStatusColour;
      LinearLayout linearLayoutAdminServerPingStatusColour = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutAdminServerPingStatusColour == null) {
        break missingId;
      }

      id = R.id.linearLayoutGetDefaultEarlyWaringScoreTypesFromServer;
      LinearLayout linearLayoutGetDefaultEarlyWaringScoreTypesFromServer = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutGetDefaultEarlyWaringScoreTypesFromServer == null) {
        break missingId;
      }

      id = R.id.linearLayoutGettingUpdatesFromServer;
      LinearLayout linearLayoutGettingUpdatesFromServer = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutGettingUpdatesFromServer == null) {
        break missingId;
      }

      id = R.id.linearLayoutServerSyncAndRealTimeLink;
      LinearLayout linearLayoutServerSyncAndRealTimeLink = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutServerSyncAndRealTimeLink == null) {
        break missingId;
      }

      id = R.id.linearLayoutTestServerLink;
      LinearLayout linearLayoutTestServerLink = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutTestServerLink == null) {
        break missingId;
      }

      id = R.id.progressBarGetUpdatedDeviceFirmware;
      ProgressBar progressBarGetUpdatedDeviceFirmware = ViewBindings.findChildViewById(rootView, id);
      if (progressBarGetUpdatedDeviceFirmware == null) {
        break missingId;
      }

      id = R.id.progressBarGettingUpdatesFromServer;
      ProgressBar progressBarGettingUpdatesFromServer = ViewBindings.findChildViewById(rootView, id);
      if (progressBarGettingUpdatesFromServer == null) {
        break missingId;
      }

      id = R.id.spinnerBedList;
      Spinner spinnerBedList = ViewBindings.findChildViewById(rootView, id);
      if (spinnerBedList == null) {
        break missingId;
      }

      id = R.id.spinnerWardList;
      Spinner spinnerWardList = ViewBindings.findChildViewById(rootView, id);
      if (spinnerWardList == null) {
        break missingId;
      }

      id = R.id.textAdminModeGatewaysAssignedBedId;
      TextView textAdminModeGatewaysAssignedBedId = ViewBindings.findChildViewById(rootView, id);
      if (textAdminModeGatewaysAssignedBedId == null) {
        break missingId;
      }

      id = R.id.textReceivedDefaultEarlyWarningScoringTypes;
      TextView textReceivedDefaultEarlyWarningScoringTypes = ViewBindings.findChildViewById(rootView, id);
      if (textReceivedDefaultEarlyWarningScoringTypes == null) {
        break missingId;
      }

      id = R.id.textReceivedUpdateFirmwareVersions;
      TextView textReceivedUpdateFirmwareVersions = ViewBindings.findChildViewById(rootView, id);
      if (textReceivedUpdateFirmwareVersions == null) {
        break missingId;
      }

      id = R.id.textViewTimeDriftValue;
      TextView textViewTimeDriftValue = ViewBindings.findChildViewById(rootView, id);
      if (textViewTimeDriftValue == null) {
        break missingId;
      }

      id = R.id.viewReceivedGatewayConfig;
      View viewReceivedGatewayConfig = ViewBindings.findChildViewById(rootView, id);
      if (viewReceivedGatewayConfig == null) {
        break missingId;
      }

      id = R.id.viewReceivedServerConfigurableTextFromServer;
      View viewReceivedServerConfigurableTextFromServer = ViewBindings.findChildViewById(rootView, id);
      if (viewReceivedServerConfigurableTextFromServer == null) {
        break missingId;
      }

      id = R.id.viewReceivedWebpageFromServer;
      View viewReceivedWebpageFromServer = ViewBindings.findChildViewById(rootView, id);
      if (viewReceivedWebpageFromServer == null) {
        break missingId;
      }

      return new AdminModeServerConnectionBinding((LinearLayout) rootView, ButtonLogCat,
          ButtonNTPSync, buttonChangeWifi, buttonCheckForUpdatedFirmware,
          buttonDeleteEarlyWarningScoreThresholdSets, buttonDeleteOldExportedDatabases,
          buttonEmptyLocalDatabase, buttonExportLocalDatabase, buttonForceInstallationComplete,
          buttonGetDefaultEarlyWarningScoringTypesFromServer, buttonGetGatewayConfigFromServer,
          buttonGetServerConfigurableTextFromServer, buttonGetViewableWebpagesFromServer,
          buttonGetWardsAndBedsFromServer, buttonRestartInstallationWizard, buttonSetBedDetails,
          buttonSetRealTimeServerPort, buttonSetServer, buttonSetServerPort, buttonTestServerLink,
          checkBoxEnableRealTimeLink, checkBoxServerDataSyncEnabled, checkBoxUseHttps,
          checkBoxUseWebServiceAuthentication, checkBoxUseWebServiceEncryption,
          editRealTimeServerPort, editServerAddress, editServerPort, labelSetBedID,
          labelSetRealTimeServerPort, labelSetServerAddress, labelSetServerPort,
          linearLayoutAdminRestartInstallationWizard, linearLayoutAdminServerPingStatus,
          linearLayoutAdminServerPingStatusColour,
          linearLayoutGetDefaultEarlyWaringScoreTypesFromServer,
          linearLayoutGettingUpdatesFromServer, linearLayoutServerSyncAndRealTimeLink,
          linearLayoutTestServerLink, progressBarGetUpdatedDeviceFirmware,
          progressBarGettingUpdatesFromServer, spinnerBedList, spinnerWardList,
          textAdminModeGatewaysAssignedBedId, textReceivedDefaultEarlyWarningScoringTypes,
          textReceivedUpdateFirmwareVersions, textViewTimeDriftValue, viewReceivedGatewayConfig,
          viewReceivedServerConfigurableTextFromServer, viewReceivedWebpageFromServer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
