// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdminModeGatewaySettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox checkBoxApplyDisplayTimeoutToPatientVitalsDisplay;

  @NonNull
  public final CheckBox checkBoxAutoAddEarlyWarningScores;

  @NonNull
  public final CheckBox checkBoxDevicePeriodicSetupModeEnabled;

  @NonNull
  public final CheckBox checkBoxEnableLT3KHzSetupMode;

  @NonNull
  public final CheckBox checkBoxEnablePredefinedAnnotations;

  @NonNull
  public final CheckBox checkBoxEnableUnpluggedOverlay;

  @NonNull
  public final CheckBox checkBoxGsmModeOnly;

  @NonNull
  public final CheckBox checkBoxPatientNameLookup;

  @NonNull
  public final CheckBox checkDfuBootloaderEnabled;

  @NonNull
  public final CheckBox checkSpO2SpotMeasurementsEnabled;

  @NonNull
  public final TextView labelDevicePeriodicModeEvery;

  @NonNull
  public final TextView labelDisplayTimeoutLength;

  @NonNull
  public final TextView labelDisplayTimeoutLengthDescription;

  @NonNull
  public final TextView labelDisplayTimeoutOnPatientVitalsDisplayDescription;

  @NonNull
  public final TextView labelLifetouchPoorDeviceSignalPercentage;

  @NonNull
  public final TextView labelLifetouchPoorDeviceSignalPercentageDescription;

  @NonNull
  public final TextView labelLongTermMeasurementTimeoutLength;

  @NonNull
  public final TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;

  @NonNull
  public final TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription;

  @NonNull
  public final TextView labelSetupModeLength;

  @NonNull
  public final LinearLayout linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay;

  @NonNull
  public final LinearLayout linearLayoutDevicePeriodicSetupModeEnabled;

  @NonNull
  public final Spinner spinnerDevicePeriodicModeActiveTimeInSeconds;

  @NonNull
  public final Spinner spinnerDevicePeriodicModePeriodTimeInSeconds;

  @NonNull
  public final Spinner spinnerDisplayTimeoutLength;

  @NonNull
  public final Spinner spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid;

  @NonNull
  public final Spinner spinnerLongTermMeasurementTimeoutLengthBloodPressure;

  @NonNull
  public final Spinner spinnerLongTermMeasurementTimeoutLengthSpO2;

  @NonNull
  public final Spinner spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature;

  @NonNull
  public final Spinner spinnerLongTermMeasurementTimeoutLengthWeight;

  @NonNull
  public final Spinner spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;

  @NonNull
  public final Spinner spinnerSetupModeLength;

  private AdminModeGatewaySettingsBinding(@NonNull LinearLayout rootView,
      @NonNull CheckBox checkBoxApplyDisplayTimeoutToPatientVitalsDisplay,
      @NonNull CheckBox checkBoxAutoAddEarlyWarningScores,
      @NonNull CheckBox checkBoxDevicePeriodicSetupModeEnabled,
      @NonNull CheckBox checkBoxEnableLT3KHzSetupMode,
      @NonNull CheckBox checkBoxEnablePredefinedAnnotations,
      @NonNull CheckBox checkBoxEnableUnpluggedOverlay, @NonNull CheckBox checkBoxGsmModeOnly,
      @NonNull CheckBox checkBoxPatientNameLookup, @NonNull CheckBox checkDfuBootloaderEnabled,
      @NonNull CheckBox checkSpO2SpotMeasurementsEnabled,
      @NonNull TextView labelDevicePeriodicModeEvery, @NonNull TextView labelDisplayTimeoutLength,
      @NonNull TextView labelDisplayTimeoutLengthDescription,
      @NonNull TextView labelDisplayTimeoutOnPatientVitalsDisplayDescription,
      @NonNull TextView labelLifetouchPoorDeviceSignalPercentage,
      @NonNull TextView labelLifetouchPoorDeviceSignalPercentageDescription,
      @NonNull TextView labelLongTermMeasurementTimeoutLength,
      @NonNull TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid,
      @NonNull TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription,
      @NonNull TextView labelSetupModeLength,
      @NonNull LinearLayout linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay,
      @NonNull LinearLayout linearLayoutDevicePeriodicSetupModeEnabled,
      @NonNull Spinner spinnerDevicePeriodicModeActiveTimeInSeconds,
      @NonNull Spinner spinnerDevicePeriodicModePeriodTimeInSeconds,
      @NonNull Spinner spinnerDisplayTimeoutLength,
      @NonNull Spinner spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid,
      @NonNull Spinner spinnerLongTermMeasurementTimeoutLengthBloodPressure,
      @NonNull Spinner spinnerLongTermMeasurementTimeoutLengthSpO2,
      @NonNull Spinner spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature,
      @NonNull Spinner spinnerLongTermMeasurementTimeoutLengthWeight,
      @NonNull Spinner spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid,
      @NonNull Spinner spinnerSetupModeLength) {
    this.rootView = rootView;
    this.checkBoxApplyDisplayTimeoutToPatientVitalsDisplay = checkBoxApplyDisplayTimeoutToPatientVitalsDisplay;
    this.checkBoxAutoAddEarlyWarningScores = checkBoxAutoAddEarlyWarningScores;
    this.checkBoxDevicePeriodicSetupModeEnabled = checkBoxDevicePeriodicSetupModeEnabled;
    this.checkBoxEnableLT3KHzSetupMode = checkBoxEnableLT3KHzSetupMode;
    this.checkBoxEnablePredefinedAnnotations = checkBoxEnablePredefinedAnnotations;
    this.checkBoxEnableUnpluggedOverlay = checkBoxEnableUnpluggedOverlay;
    this.checkBoxGsmModeOnly = checkBoxGsmModeOnly;
    this.checkBoxPatientNameLookup = checkBoxPatientNameLookup;
    this.checkDfuBootloaderEnabled = checkDfuBootloaderEnabled;
    this.checkSpO2SpotMeasurementsEnabled = checkSpO2SpotMeasurementsEnabled;
    this.labelDevicePeriodicModeEvery = labelDevicePeriodicModeEvery;
    this.labelDisplayTimeoutLength = labelDisplayTimeoutLength;
    this.labelDisplayTimeoutLengthDescription = labelDisplayTimeoutLengthDescription;
    this.labelDisplayTimeoutOnPatientVitalsDisplayDescription = labelDisplayTimeoutOnPatientVitalsDisplayDescription;
    this.labelLifetouchPoorDeviceSignalPercentage = labelLifetouchPoorDeviceSignalPercentage;
    this.labelLifetouchPoorDeviceSignalPercentageDescription = labelLifetouchPoorDeviceSignalPercentageDescription;
    this.labelLongTermMeasurementTimeoutLength = labelLongTermMeasurementTimeoutLength;
    this.labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid = labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;
    this.labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription = labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription;
    this.labelSetupModeLength = labelSetupModeLength;
    this.linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay = linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay;
    this.linearLayoutDevicePeriodicSetupModeEnabled = linearLayoutDevicePeriodicSetupModeEnabled;
    this.spinnerDevicePeriodicModeActiveTimeInSeconds = spinnerDevicePeriodicModeActiveTimeInSeconds;
    this.spinnerDevicePeriodicModePeriodTimeInSeconds = spinnerDevicePeriodicModePeriodTimeInSeconds;
    this.spinnerDisplayTimeoutLength = spinnerDisplayTimeoutLength;
    this.spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid = spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid;
    this.spinnerLongTermMeasurementTimeoutLengthBloodPressure = spinnerLongTermMeasurementTimeoutLengthBloodPressure;
    this.spinnerLongTermMeasurementTimeoutLengthSpO2 = spinnerLongTermMeasurementTimeoutLengthSpO2;
    this.spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature = spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature;
    this.spinnerLongTermMeasurementTimeoutLengthWeight = spinnerLongTermMeasurementTimeoutLengthWeight;
    this.spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid = spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;
    this.spinnerSetupModeLength = spinnerSetupModeLength;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdminModeGatewaySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdminModeGatewaySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.admin_mode_gateway_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdminModeGatewaySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkBoxApplyDisplayTimeoutToPatientVitalsDisplay;
      CheckBox checkBoxApplyDisplayTimeoutToPatientVitalsDisplay = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxApplyDisplayTimeoutToPatientVitalsDisplay == null) {
        break missingId;
      }

      id = R.id.checkBoxAutoAddEarlyWarningScores;
      CheckBox checkBoxAutoAddEarlyWarningScores = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAutoAddEarlyWarningScores == null) {
        break missingId;
      }

      id = R.id.checkBoxDevicePeriodicSetupModeEnabled;
      CheckBox checkBoxDevicePeriodicSetupModeEnabled = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxDevicePeriodicSetupModeEnabled == null) {
        break missingId;
      }

      id = R.id.checkBoxEnableLT3KHzSetupMode;
      CheckBox checkBoxEnableLT3KHzSetupMode = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxEnableLT3KHzSetupMode == null) {
        break missingId;
      }

      id = R.id.checkBoxEnablePredefinedAnnotations;
      CheckBox checkBoxEnablePredefinedAnnotations = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxEnablePredefinedAnnotations == null) {
        break missingId;
      }

      id = R.id.checkBoxEnableUnpluggedOverlay;
      CheckBox checkBoxEnableUnpluggedOverlay = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxEnableUnpluggedOverlay == null) {
        break missingId;
      }

      id = R.id.checkBoxGsmModeOnly;
      CheckBox checkBoxGsmModeOnly = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxGsmModeOnly == null) {
        break missingId;
      }

      id = R.id.checkBoxPatientNameLookup;
      CheckBox checkBoxPatientNameLookup = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxPatientNameLookup == null) {
        break missingId;
      }

      id = R.id.checkDfuBootloaderEnabled;
      CheckBox checkDfuBootloaderEnabled = ViewBindings.findChildViewById(rootView, id);
      if (checkDfuBootloaderEnabled == null) {
        break missingId;
      }

      id = R.id.checkSpO2SpotMeasurementsEnabled;
      CheckBox checkSpO2SpotMeasurementsEnabled = ViewBindings.findChildViewById(rootView, id);
      if (checkSpO2SpotMeasurementsEnabled == null) {
        break missingId;
      }

      id = R.id.labelDevicePeriodicModeEvery;
      TextView labelDevicePeriodicModeEvery = ViewBindings.findChildViewById(rootView, id);
      if (labelDevicePeriodicModeEvery == null) {
        break missingId;
      }

      id = R.id.labelDisplayTimeoutLength;
      TextView labelDisplayTimeoutLength = ViewBindings.findChildViewById(rootView, id);
      if (labelDisplayTimeoutLength == null) {
        break missingId;
      }

      id = R.id.labelDisplayTimeoutLengthDescription;
      TextView labelDisplayTimeoutLengthDescription = ViewBindings.findChildViewById(rootView, id);
      if (labelDisplayTimeoutLengthDescription == null) {
        break missingId;
      }

      id = R.id.labelDisplayTimeoutOnPatientVitalsDisplayDescription;
      TextView labelDisplayTimeoutOnPatientVitalsDisplayDescription = ViewBindings.findChildViewById(rootView, id);
      if (labelDisplayTimeoutOnPatientVitalsDisplayDescription == null) {
        break missingId;
      }

      id = R.id.labelLifetouchPoorDeviceSignalPercentage;
      TextView labelLifetouchPoorDeviceSignalPercentage = ViewBindings.findChildViewById(rootView, id);
      if (labelLifetouchPoorDeviceSignalPercentage == null) {
        break missingId;
      }

      id = R.id.labelLifetouchPoorDeviceSignalPercentageDescription;
      TextView labelLifetouchPoorDeviceSignalPercentageDescription = ViewBindings.findChildViewById(rootView, id);
      if (labelLifetouchPoorDeviceSignalPercentageDescription == null) {
        break missingId;
      }

      id = R.id.labelLongTermMeasurementTimeoutLength;
      TextView labelLongTermMeasurementTimeoutLength = ViewBindings.findChildViewById(rootView, id);
      if (labelLongTermMeasurementTimeoutLength == null) {
        break missingId;
      }

      id = R.id.labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;
      TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid = ViewBindings.findChildViewById(rootView, id);
      if (labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid == null) {
        break missingId;
      }

      id = R.id.labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription;
      TextView labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription = ViewBindings.findChildViewById(rootView, id);
      if (labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription == null) {
        break missingId;
      }

      id = R.id.labelSetupModeLength;
      TextView labelSetupModeLength = ViewBindings.findChildViewById(rootView, id);
      if (labelSetupModeLength == null) {
        break missingId;
      }

      id = R.id.linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay;
      LinearLayout linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay == null) {
        break missingId;
      }

      id = R.id.linearLayoutDevicePeriodicSetupModeEnabled;
      LinearLayout linearLayoutDevicePeriodicSetupModeEnabled = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutDevicePeriodicSetupModeEnabled == null) {
        break missingId;
      }

      id = R.id.spinnerDevicePeriodicModeActiveTimeInSeconds;
      Spinner spinnerDevicePeriodicModeActiveTimeInSeconds = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDevicePeriodicModeActiveTimeInSeconds == null) {
        break missingId;
      }

      id = R.id.spinnerDevicePeriodicModePeriodTimeInSeconds;
      Spinner spinnerDevicePeriodicModePeriodTimeInSeconds = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDevicePeriodicModePeriodTimeInSeconds == null) {
        break missingId;
      }

      id = R.id.spinnerDisplayTimeoutLength;
      Spinner spinnerDisplayTimeoutLength = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDisplayTimeoutLength == null) {
        break missingId;
      }

      id = R.id.spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid;
      Spinner spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid == null) {
        break missingId;
      }

      id = R.id.spinnerLongTermMeasurementTimeoutLengthBloodPressure;
      Spinner spinnerLongTermMeasurementTimeoutLengthBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLongTermMeasurementTimeoutLengthBloodPressure == null) {
        break missingId;
      }

      id = R.id.spinnerLongTermMeasurementTimeoutLengthSpO2;
      Spinner spinnerLongTermMeasurementTimeoutLengthSpO2 = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLongTermMeasurementTimeoutLengthSpO2 == null) {
        break missingId;
      }

      id = R.id.spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature;
      Spinner spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature == null) {
        break missingId;
      }

      id = R.id.spinnerLongTermMeasurementTimeoutLengthWeight;
      Spinner spinnerLongTermMeasurementTimeoutLengthWeight = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLongTermMeasurementTimeoutLengthWeight == null) {
        break missingId;
      }

      id = R.id.spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid;
      Spinner spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid = ViewBindings.findChildViewById(rootView, id);
      if (spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid == null) {
        break missingId;
      }

      id = R.id.spinnerSetupModeLength;
      Spinner spinnerSetupModeLength = ViewBindings.findChildViewById(rootView, id);
      if (spinnerSetupModeLength == null) {
        break missingId;
      }

      return new AdminModeGatewaySettingsBinding((LinearLayout) rootView,
          checkBoxApplyDisplayTimeoutToPatientVitalsDisplay, checkBoxAutoAddEarlyWarningScores,
          checkBoxDevicePeriodicSetupModeEnabled, checkBoxEnableLT3KHzSetupMode,
          checkBoxEnablePredefinedAnnotations, checkBoxEnableUnpluggedOverlay, checkBoxGsmModeOnly,
          checkBoxPatientNameLookup, checkDfuBootloaderEnabled, checkSpO2SpotMeasurementsEnabled,
          labelDevicePeriodicModeEvery, labelDisplayTimeoutLength,
          labelDisplayTimeoutLengthDescription,
          labelDisplayTimeoutOnPatientVitalsDisplayDescription,
          labelLifetouchPoorDeviceSignalPercentage,
          labelLifetouchPoorDeviceSignalPercentageDescription,
          labelLongTermMeasurementTimeoutLength,
          labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid,
          labelNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalidDescription,
          labelSetupModeLength, linearLayoutApplyDisplayTimeoutToPatientVitalsDisplay,
          linearLayoutDevicePeriodicSetupModeEnabled, spinnerDevicePeriodicModeActiveTimeInSeconds,
          spinnerDevicePeriodicModePeriodTimeInSeconds, spinnerDisplayTimeoutLength,
          spinnerLifetouchPercentageOfPoorSignalHeartBeatsBeforeMarkingAsInvalid,
          spinnerLongTermMeasurementTimeoutLengthBloodPressure,
          spinnerLongTermMeasurementTimeoutLengthSpO2,
          spinnerLongTermMeasurementTimeoutLengthThirdPartyTemperature,
          spinnerLongTermMeasurementTimeoutLengthWeight,
          spinnerNoninPulseOxNumberOfInvalidIntermediateMeasurementsBeforeMarkingAsInvalid,
          spinnerSetupModeLength);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
