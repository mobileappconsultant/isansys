// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AndroidPermissionsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonEnableAccessNotificationPolicyPermissions;

  @NonNull
  public final Button buttonEnableCameraPermissions;

  @NonNull
  public final Button buttonEnableInstallPackagesPermissions;

  @NonNull
  public final Button buttonEnableOverlayPermissions;

  @NonNull
  public final Button buttonEnableRecordAudioPermissions;

  @NonNull
  public final Button buttonEnableWriteExternalStoragePermissions;

  @NonNull
  public final Button buttonEnableWriteSettingsPermissions;

  @NonNull
  public final TableRow tableAccessNotificationPolicyPermission;

  @NonNull
  public final TableRow tableInstallPackagesPermission;

  @NonNull
  public final TableRow tableRecordAudioPermission;

  @NonNull
  public final TableRow tableRowCameraPermission;

  @NonNull
  public final TableRow tableRowOverlayPermissions;

  @NonNull
  public final TableRow tableRowWriteSettingPermissions;

  @NonNull
  public final TableRow tableWriteExternalStoragePermission;

  @NonNull
  public final TextView textViewAccessNotificationPolicyPermission;

  @NonNull
  public final TextView textViewCameraPermission;

  @NonNull
  public final TextView textViewEnableAccessNotificationPolicyDescription;

  @NonNull
  public final TextView textViewEnableCameraDescription;

  @NonNull
  public final TextView textViewEnableInstallPackagesDescription;

  @NonNull
  public final TextView textViewEnableRecordAudioDescription;

  @NonNull
  public final TextView textViewEnableWriteExternalStorageDescription;

  @NonNull
  public final TextView textViewInstallPackagesPermission;

  @NonNull
  public final TextView textViewOverlayPermission;

  @NonNull
  public final TextView textViewOverlayPermissionDescription;

  @NonNull
  public final TextView textViewRecordAudioPermission;

  @NonNull
  public final TextView textViewWriteExternalStoragePermission;

  @NonNull
  public final TextView textViewWriteSettingsPermission;

  @NonNull
  public final TextView textViewWriteSettingsPermissionDescription;

  @NonNull
  public final View viewAccessNotificationPolicyPermission;

  @NonNull
  public final View viewCameraPermission;

  @NonNull
  public final View viewInstallPackagesPermission;

  @NonNull
  public final View viewOverlayPermission;

  @NonNull
  public final View viewRecordAudioPermission;

  @NonNull
  public final View viewWriteExternalStoragePermission;

  @NonNull
  public final View viewWriteSettingsPermission;

  private AndroidPermissionsBinding(@NonNull LinearLayout rootView,
      @NonNull Button buttonEnableAccessNotificationPolicyPermissions,
      @NonNull Button buttonEnableCameraPermissions,
      @NonNull Button buttonEnableInstallPackagesPermissions,
      @NonNull Button buttonEnableOverlayPermissions,
      @NonNull Button buttonEnableRecordAudioPermissions,
      @NonNull Button buttonEnableWriteExternalStoragePermissions,
      @NonNull Button buttonEnableWriteSettingsPermissions,
      @NonNull TableRow tableAccessNotificationPolicyPermission,
      @NonNull TableRow tableInstallPackagesPermission,
      @NonNull TableRow tableRecordAudioPermission, @NonNull TableRow tableRowCameraPermission,
      @NonNull TableRow tableRowOverlayPermissions,
      @NonNull TableRow tableRowWriteSettingPermissions,
      @NonNull TableRow tableWriteExternalStoragePermission,
      @NonNull TextView textViewAccessNotificationPolicyPermission,
      @NonNull TextView textViewCameraPermission,
      @NonNull TextView textViewEnableAccessNotificationPolicyDescription,
      @NonNull TextView textViewEnableCameraDescription,
      @NonNull TextView textViewEnableInstallPackagesDescription,
      @NonNull TextView textViewEnableRecordAudioDescription,
      @NonNull TextView textViewEnableWriteExternalStorageDescription,
      @NonNull TextView textViewInstallPackagesPermission,
      @NonNull TextView textViewOverlayPermission,
      @NonNull TextView textViewOverlayPermissionDescription,
      @NonNull TextView textViewRecordAudioPermission,
      @NonNull TextView textViewWriteExternalStoragePermission,
      @NonNull TextView textViewWriteSettingsPermission,
      @NonNull TextView textViewWriteSettingsPermissionDescription,
      @NonNull View viewAccessNotificationPolicyPermission, @NonNull View viewCameraPermission,
      @NonNull View viewInstallPackagesPermission, @NonNull View viewOverlayPermission,
      @NonNull View viewRecordAudioPermission, @NonNull View viewWriteExternalStoragePermission,
      @NonNull View viewWriteSettingsPermission) {
    this.rootView = rootView;
    this.buttonEnableAccessNotificationPolicyPermissions = buttonEnableAccessNotificationPolicyPermissions;
    this.buttonEnableCameraPermissions = buttonEnableCameraPermissions;
    this.buttonEnableInstallPackagesPermissions = buttonEnableInstallPackagesPermissions;
    this.buttonEnableOverlayPermissions = buttonEnableOverlayPermissions;
    this.buttonEnableRecordAudioPermissions = buttonEnableRecordAudioPermissions;
    this.buttonEnableWriteExternalStoragePermissions = buttonEnableWriteExternalStoragePermissions;
    this.buttonEnableWriteSettingsPermissions = buttonEnableWriteSettingsPermissions;
    this.tableAccessNotificationPolicyPermission = tableAccessNotificationPolicyPermission;
    this.tableInstallPackagesPermission = tableInstallPackagesPermission;
    this.tableRecordAudioPermission = tableRecordAudioPermission;
    this.tableRowCameraPermission = tableRowCameraPermission;
    this.tableRowOverlayPermissions = tableRowOverlayPermissions;
    this.tableRowWriteSettingPermissions = tableRowWriteSettingPermissions;
    this.tableWriteExternalStoragePermission = tableWriteExternalStoragePermission;
    this.textViewAccessNotificationPolicyPermission = textViewAccessNotificationPolicyPermission;
    this.textViewCameraPermission = textViewCameraPermission;
    this.textViewEnableAccessNotificationPolicyDescription = textViewEnableAccessNotificationPolicyDescription;
    this.textViewEnableCameraDescription = textViewEnableCameraDescription;
    this.textViewEnableInstallPackagesDescription = textViewEnableInstallPackagesDescription;
    this.textViewEnableRecordAudioDescription = textViewEnableRecordAudioDescription;
    this.textViewEnableWriteExternalStorageDescription = textViewEnableWriteExternalStorageDescription;
    this.textViewInstallPackagesPermission = textViewInstallPackagesPermission;
    this.textViewOverlayPermission = textViewOverlayPermission;
    this.textViewOverlayPermissionDescription = textViewOverlayPermissionDescription;
    this.textViewRecordAudioPermission = textViewRecordAudioPermission;
    this.textViewWriteExternalStoragePermission = textViewWriteExternalStoragePermission;
    this.textViewWriteSettingsPermission = textViewWriteSettingsPermission;
    this.textViewWriteSettingsPermissionDescription = textViewWriteSettingsPermissionDescription;
    this.viewAccessNotificationPolicyPermission = viewAccessNotificationPolicyPermission;
    this.viewCameraPermission = viewCameraPermission;
    this.viewInstallPackagesPermission = viewInstallPackagesPermission;
    this.viewOverlayPermission = viewOverlayPermission;
    this.viewRecordAudioPermission = viewRecordAudioPermission;
    this.viewWriteExternalStoragePermission = viewWriteExternalStoragePermission;
    this.viewWriteSettingsPermission = viewWriteSettingsPermission;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AndroidPermissionsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AndroidPermissionsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.android_permissions, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AndroidPermissionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonEnableAccessNotificationPolicyPermissions;
      Button buttonEnableAccessNotificationPolicyPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableAccessNotificationPolicyPermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableCameraPermissions;
      Button buttonEnableCameraPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableCameraPermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableInstallPackagesPermissions;
      Button buttonEnableInstallPackagesPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableInstallPackagesPermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableOverlayPermissions;
      Button buttonEnableOverlayPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableOverlayPermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableRecordAudioPermissions;
      Button buttonEnableRecordAudioPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableRecordAudioPermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableWriteExternalStoragePermissions;
      Button buttonEnableWriteExternalStoragePermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableWriteExternalStoragePermissions == null) {
        break missingId;
      }

      id = R.id.buttonEnableWriteSettingsPermissions;
      Button buttonEnableWriteSettingsPermissions = ViewBindings.findChildViewById(rootView, id);
      if (buttonEnableWriteSettingsPermissions == null) {
        break missingId;
      }

      id = R.id.tableAccessNotificationPolicyPermission;
      TableRow tableAccessNotificationPolicyPermission = ViewBindings.findChildViewById(rootView, id);
      if (tableAccessNotificationPolicyPermission == null) {
        break missingId;
      }

      id = R.id.tableInstallPackagesPermission;
      TableRow tableInstallPackagesPermission = ViewBindings.findChildViewById(rootView, id);
      if (tableInstallPackagesPermission == null) {
        break missingId;
      }

      id = R.id.tableRecordAudioPermission;
      TableRow tableRecordAudioPermission = ViewBindings.findChildViewById(rootView, id);
      if (tableRecordAudioPermission == null) {
        break missingId;
      }

      id = R.id.tableRowCameraPermission;
      TableRow tableRowCameraPermission = ViewBindings.findChildViewById(rootView, id);
      if (tableRowCameraPermission == null) {
        break missingId;
      }

      id = R.id.tableRowOverlayPermissions;
      TableRow tableRowOverlayPermissions = ViewBindings.findChildViewById(rootView, id);
      if (tableRowOverlayPermissions == null) {
        break missingId;
      }

      id = R.id.tableRowWriteSettingPermissions;
      TableRow tableRowWriteSettingPermissions = ViewBindings.findChildViewById(rootView, id);
      if (tableRowWriteSettingPermissions == null) {
        break missingId;
      }

      id = R.id.tableWriteExternalStoragePermission;
      TableRow tableWriteExternalStoragePermission = ViewBindings.findChildViewById(rootView, id);
      if (tableWriteExternalStoragePermission == null) {
        break missingId;
      }

      id = R.id.textViewAccessNotificationPolicyPermission;
      TextView textViewAccessNotificationPolicyPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewAccessNotificationPolicyPermission == null) {
        break missingId;
      }

      id = R.id.textViewCameraPermission;
      TextView textViewCameraPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewCameraPermission == null) {
        break missingId;
      }

      id = R.id.textViewEnableAccessNotificationPolicyDescription;
      TextView textViewEnableAccessNotificationPolicyDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewEnableAccessNotificationPolicyDescription == null) {
        break missingId;
      }

      id = R.id.textViewEnableCameraDescription;
      TextView textViewEnableCameraDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewEnableCameraDescription == null) {
        break missingId;
      }

      id = R.id.textViewEnableInstallPackagesDescription;
      TextView textViewEnableInstallPackagesDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewEnableInstallPackagesDescription == null) {
        break missingId;
      }

      id = R.id.textViewEnableRecordAudioDescription;
      TextView textViewEnableRecordAudioDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewEnableRecordAudioDescription == null) {
        break missingId;
      }

      id = R.id.textViewEnableWriteExternalStorageDescription;
      TextView textViewEnableWriteExternalStorageDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewEnableWriteExternalStorageDescription == null) {
        break missingId;
      }

      id = R.id.textViewInstallPackagesPermission;
      TextView textViewInstallPackagesPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewInstallPackagesPermission == null) {
        break missingId;
      }

      id = R.id.textViewOverlayPermission;
      TextView textViewOverlayPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewOverlayPermission == null) {
        break missingId;
      }

      id = R.id.textViewOverlayPermissionDescription;
      TextView textViewOverlayPermissionDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewOverlayPermissionDescription == null) {
        break missingId;
      }

      id = R.id.textViewRecordAudioPermission;
      TextView textViewRecordAudioPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewRecordAudioPermission == null) {
        break missingId;
      }

      id = R.id.textViewWriteExternalStoragePermission;
      TextView textViewWriteExternalStoragePermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewWriteExternalStoragePermission == null) {
        break missingId;
      }

      id = R.id.textViewWriteSettingsPermission;
      TextView textViewWriteSettingsPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewWriteSettingsPermission == null) {
        break missingId;
      }

      id = R.id.textViewWriteSettingsPermissionDescription;
      TextView textViewWriteSettingsPermissionDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewWriteSettingsPermissionDescription == null) {
        break missingId;
      }

      id = R.id.viewAccessNotificationPolicyPermission;
      View viewAccessNotificationPolicyPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewAccessNotificationPolicyPermission == null) {
        break missingId;
      }

      id = R.id.viewCameraPermission;
      View viewCameraPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewCameraPermission == null) {
        break missingId;
      }

      id = R.id.viewInstallPackagesPermission;
      View viewInstallPackagesPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewInstallPackagesPermission == null) {
        break missingId;
      }

      id = R.id.viewOverlayPermission;
      View viewOverlayPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewOverlayPermission == null) {
        break missingId;
      }

      id = R.id.viewRecordAudioPermission;
      View viewRecordAudioPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewRecordAudioPermission == null) {
        break missingId;
      }

      id = R.id.viewWriteExternalStoragePermission;
      View viewWriteExternalStoragePermission = ViewBindings.findChildViewById(rootView, id);
      if (viewWriteExternalStoragePermission == null) {
        break missingId;
      }

      id = R.id.viewWriteSettingsPermission;
      View viewWriteSettingsPermission = ViewBindings.findChildViewById(rootView, id);
      if (viewWriteSettingsPermission == null) {
        break missingId;
      }

      return new AndroidPermissionsBinding((LinearLayout) rootView,
          buttonEnableAccessNotificationPolicyPermissions, buttonEnableCameraPermissions,
          buttonEnableInstallPackagesPermissions, buttonEnableOverlayPermissions,
          buttonEnableRecordAudioPermissions, buttonEnableWriteExternalStoragePermissions,
          buttonEnableWriteSettingsPermissions, tableAccessNotificationPolicyPermission,
          tableInstallPackagesPermission, tableRecordAudioPermission, tableRowCameraPermission,
          tableRowOverlayPermissions, tableRowWriteSettingPermissions,
          tableWriteExternalStoragePermission, textViewAccessNotificationPolicyPermission,
          textViewCameraPermission, textViewEnableAccessNotificationPolicyDescription,
          textViewEnableCameraDescription, textViewEnableInstallPackagesDescription,
          textViewEnableRecordAudioDescription, textViewEnableWriteExternalStorageDescription,
          textViewInstallPackagesPermission, textViewOverlayPermission,
          textViewOverlayPermissionDescription, textViewRecordAudioPermission,
          textViewWriteExternalStoragePermission, textViewWriteSettingsPermission,
          textViewWriteSettingsPermissionDescription, viewAccessNotificationPolicyPermission,
          viewCameraPermission, viewInstallPackagesPermission, viewOverlayPermission,
          viewRecordAudioPermission, viewWriteExternalStoragePermission,
          viewWriteSettingsPermission);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
