// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckedTextView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PatientVitalsDisplayLifetouchOptionsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckedTextView checkBoxLifetouchOptionsHeartRatePoincare;

  @NonNull
  public final CheckedTextView checkBoxLifetouchOptionsRawAccelerometerMode;

  @NonNull
  public final CheckedTextView checkBoxLifetouchOptionsRawAccelerometerModeDisabled;

  @NonNull
  public final CheckedTextView checkBoxLifetouchOptionsSetupMode;

  @NonNull
  public final CheckedTextView checkBoxLifetouchOptionsSetupModeDisabled;

  @NonNull
  public final LinearLayout normalMode;

  private PatientVitalsDisplayLifetouchOptionsBinding(@NonNull LinearLayout rootView,
      @NonNull CheckedTextView checkBoxLifetouchOptionsHeartRatePoincare,
      @NonNull CheckedTextView checkBoxLifetouchOptionsRawAccelerometerMode,
      @NonNull CheckedTextView checkBoxLifetouchOptionsRawAccelerometerModeDisabled,
      @NonNull CheckedTextView checkBoxLifetouchOptionsSetupMode,
      @NonNull CheckedTextView checkBoxLifetouchOptionsSetupModeDisabled,
      @NonNull LinearLayout normalMode) {
    this.rootView = rootView;
    this.checkBoxLifetouchOptionsHeartRatePoincare = checkBoxLifetouchOptionsHeartRatePoincare;
    this.checkBoxLifetouchOptionsRawAccelerometerMode = checkBoxLifetouchOptionsRawAccelerometerMode;
    this.checkBoxLifetouchOptionsRawAccelerometerModeDisabled = checkBoxLifetouchOptionsRawAccelerometerModeDisabled;
    this.checkBoxLifetouchOptionsSetupMode = checkBoxLifetouchOptionsSetupMode;
    this.checkBoxLifetouchOptionsSetupModeDisabled = checkBoxLifetouchOptionsSetupModeDisabled;
    this.normalMode = normalMode;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PatientVitalsDisplayLifetouchOptionsBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PatientVitalsDisplayLifetouchOptionsBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.patient_vitals_display__lifetouch_options, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PatientVitalsDisplayLifetouchOptionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkBoxLifetouchOptionsHeartRatePoincare;
      CheckedTextView checkBoxLifetouchOptionsHeartRatePoincare = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLifetouchOptionsHeartRatePoincare == null) {
        break missingId;
      }

      id = R.id.checkBoxLifetouchOptionsRawAccelerometerMode;
      CheckedTextView checkBoxLifetouchOptionsRawAccelerometerMode = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLifetouchOptionsRawAccelerometerMode == null) {
        break missingId;
      }

      id = R.id.checkBoxLifetouchOptionsRawAccelerometerModeDisabled;
      CheckedTextView checkBoxLifetouchOptionsRawAccelerometerModeDisabled = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLifetouchOptionsRawAccelerometerModeDisabled == null) {
        break missingId;
      }

      id = R.id.checkBoxLifetouchOptionsSetupMode;
      CheckedTextView checkBoxLifetouchOptionsSetupMode = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLifetouchOptionsSetupMode == null) {
        break missingId;
      }

      id = R.id.checkBoxLifetouchOptionsSetupModeDisabled;
      CheckedTextView checkBoxLifetouchOptionsSetupModeDisabled = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLifetouchOptionsSetupModeDisabled == null) {
        break missingId;
      }

      LinearLayout normalMode = (LinearLayout) rootView;

      return new PatientVitalsDisplayLifetouchOptionsBinding((LinearLayout) rootView,
          checkBoxLifetouchOptionsHeartRatePoincare, checkBoxLifetouchOptionsRawAccelerometerMode,
          checkBoxLifetouchOptionsRawAccelerometerModeDisabled, checkBoxLifetouchOptionsSetupMode,
          checkBoxLifetouchOptionsSetupModeDisabled, normalMode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
