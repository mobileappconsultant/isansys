// Generated by view binder compiler. Do not edit!
package com.isansys.pse_isansysportal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.isansys.pse_isansysportal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class QrCodeUnlockBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout barCodeActivityQrUnlock;

  @NonNull
  public final Button buttonSimulateAdminQrCode;

  @NonNull
  public final Button buttonSimulateGeneralQrCode;

  @NonNull
  public final Button buttonUnlockQrCodeScanScreen;

  @NonNull
  public final ImageView heartbeat;

  @NonNull
  public final ImageView imageBatteryBloodPressure;

  @NonNull
  public final ImageView imageBatteryLifetemp;

  @NonNull
  public final ImageView imageBatteryLifetouch;

  @NonNull
  public final ImageView imageBatteryNoninWristOx;

  @NonNull
  public final ImageView imageBatteryWeightScale;

  @NonNull
  public final ImageView imageBloodPressureOutOfRange;

  @NonNull
  public final ImageView imageLifetouchOutOfRange;

  @NonNull
  public final ImageView imagePulseOxOutOfRange;

  @NonNull
  public final ImageView imageSpaceFillerBloodPressure;

  @NonNull
  public final ImageView imageSpaceFillerLifetemp;

  @NonNull
  public final ImageView imageSpaceFillerNonin;

  @NonNull
  public final ImageView imageSpaceFillerWeightScale;

  @NonNull
  public final ImageView imageThermometerOutOfRange;

  @NonNull
  public final ImageView imageVideoCall;

  @NonNull
  public final ImageView imageWeightScaleOutOfRange;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfo;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoBloodPressure;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoLifetemp;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoLifetouch;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoNoninWristOx;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoWeightScale;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceRedBorderStatusBloodPressure;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetemp;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetouch;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceRedBorderStatusNonin;

  @NonNull
  public final LinearLayout linearLayoutLockScreenDeviceRedBorderStatusWeightScale;

  @NonNull
  public final LinearLayout linearLayoutStartVideoCall;

  @NonNull
  public final LinearLayout qrBarCode;

  @NonNull
  public final TableRow tableRowManuallyEnteredOnlySession;

  @NonNull
  public final TableRow tableRowSensorDeviceInfo;

  @NonNull
  public final TableRow tableRowSoftwareUpdatePending;

  @NonNull
  public final TableRow tableRowStartVideoCall;

  @NonNull
  public final TextView textBloodPressure;

  @NonNull
  public final TextView textBloodPressureHumanReadableDeviceId;

  @NonNull
  public final TextView textLifetempBatteryPercentage;

  @NonNull
  public final TextView textLifetempHumanReadableDeviceId;

  @NonNull
  public final TextView textLifetempLabel;

  @NonNull
  public final TextView textLifetempRedBorderStatus;

  @NonNull
  public final TextView textLifetouchBatteryPercentage;

  @NonNull
  public final TextView textLifetouchHumanReadableDeviceId;

  @NonNull
  public final TextView textLifetouchLabel;

  @NonNull
  public final TextView textLifetouchRedBorderStatus;

  @NonNull
  public final TextView textLongPress;

  @NonNull
  public final TextView textManualVitalsOnlySession;

  @NonNull
  public final TextView textNoninRedBorderStatus;

  @NonNull
  public final TextView textNoninWristOxHumanReadableDeviceId;

  @NonNull
  public final TextView textNoninWristOxLabel;

  @NonNull
  public final TextView textPleaseScanIdQrCode;

  @NonNull
  public final TextView textQrCodeUnlockPageHelp;

  @NonNull
  public final TextView textSoftwareUpdatePending;

  @NonNull
  public final TextView textStartVideoCall;

  @NonNull
  public final TextView textWeightScale;

  @NonNull
  public final TextView textWeightScaleHumanReadableDeviceId;

  private QrCodeUnlockBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout barCodeActivityQrUnlock, @NonNull Button buttonSimulateAdminQrCode,
      @NonNull Button buttonSimulateGeneralQrCode, @NonNull Button buttonUnlockQrCodeScanScreen,
      @NonNull ImageView heartbeat, @NonNull ImageView imageBatteryBloodPressure,
      @NonNull ImageView imageBatteryLifetemp, @NonNull ImageView imageBatteryLifetouch,
      @NonNull ImageView imageBatteryNoninWristOx, @NonNull ImageView imageBatteryWeightScale,
      @NonNull ImageView imageBloodPressureOutOfRange, @NonNull ImageView imageLifetouchOutOfRange,
      @NonNull ImageView imagePulseOxOutOfRange, @NonNull ImageView imageSpaceFillerBloodPressure,
      @NonNull ImageView imageSpaceFillerLifetemp, @NonNull ImageView imageSpaceFillerNonin,
      @NonNull ImageView imageSpaceFillerWeightScale, @NonNull ImageView imageThermometerOutOfRange,
      @NonNull ImageView imageVideoCall, @NonNull ImageView imageWeightScaleOutOfRange,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfo,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoBloodPressure,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoLifetemp,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoLifetouch,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoNoninWristOx,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoWeightScale,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected,
      @NonNull LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved,
      @NonNull LinearLayout linearLayoutLockScreenDeviceRedBorderStatusBloodPressure,
      @NonNull LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetemp,
      @NonNull LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetouch,
      @NonNull LinearLayout linearLayoutLockScreenDeviceRedBorderStatusNonin,
      @NonNull LinearLayout linearLayoutLockScreenDeviceRedBorderStatusWeightScale,
      @NonNull LinearLayout linearLayoutStartVideoCall, @NonNull LinearLayout qrBarCode,
      @NonNull TableRow tableRowManuallyEnteredOnlySession,
      @NonNull TableRow tableRowSensorDeviceInfo, @NonNull TableRow tableRowSoftwareUpdatePending,
      @NonNull TableRow tableRowStartVideoCall, @NonNull TextView textBloodPressure,
      @NonNull TextView textBloodPressureHumanReadableDeviceId,
      @NonNull TextView textLifetempBatteryPercentage,
      @NonNull TextView textLifetempHumanReadableDeviceId, @NonNull TextView textLifetempLabel,
      @NonNull TextView textLifetempRedBorderStatus,
      @NonNull TextView textLifetouchBatteryPercentage,
      @NonNull TextView textLifetouchHumanReadableDeviceId, @NonNull TextView textLifetouchLabel,
      @NonNull TextView textLifetouchRedBorderStatus, @NonNull TextView textLongPress,
      @NonNull TextView textManualVitalsOnlySession, @NonNull TextView textNoninRedBorderStatus,
      @NonNull TextView textNoninWristOxHumanReadableDeviceId,
      @NonNull TextView textNoninWristOxLabel, @NonNull TextView textPleaseScanIdQrCode,
      @NonNull TextView textQrCodeUnlockPageHelp, @NonNull TextView textSoftwareUpdatePending,
      @NonNull TextView textStartVideoCall, @NonNull TextView textWeightScale,
      @NonNull TextView textWeightScaleHumanReadableDeviceId) {
    this.rootView = rootView;
    this.barCodeActivityQrUnlock = barCodeActivityQrUnlock;
    this.buttonSimulateAdminQrCode = buttonSimulateAdminQrCode;
    this.buttonSimulateGeneralQrCode = buttonSimulateGeneralQrCode;
    this.buttonUnlockQrCodeScanScreen = buttonUnlockQrCodeScanScreen;
    this.heartbeat = heartbeat;
    this.imageBatteryBloodPressure = imageBatteryBloodPressure;
    this.imageBatteryLifetemp = imageBatteryLifetemp;
    this.imageBatteryLifetouch = imageBatteryLifetouch;
    this.imageBatteryNoninWristOx = imageBatteryNoninWristOx;
    this.imageBatteryWeightScale = imageBatteryWeightScale;
    this.imageBloodPressureOutOfRange = imageBloodPressureOutOfRange;
    this.imageLifetouchOutOfRange = imageLifetouchOutOfRange;
    this.imagePulseOxOutOfRange = imagePulseOxOutOfRange;
    this.imageSpaceFillerBloodPressure = imageSpaceFillerBloodPressure;
    this.imageSpaceFillerLifetemp = imageSpaceFillerLifetemp;
    this.imageSpaceFillerNonin = imageSpaceFillerNonin;
    this.imageSpaceFillerWeightScale = imageSpaceFillerWeightScale;
    this.imageThermometerOutOfRange = imageThermometerOutOfRange;
    this.imageVideoCall = imageVideoCall;
    this.imageWeightScaleOutOfRange = imageWeightScaleOutOfRange;
    this.linearLayoutLockScreenDeviceInfo = linearLayoutLockScreenDeviceInfo;
    this.linearLayoutLockScreenDeviceInfoBloodPressure = linearLayoutLockScreenDeviceInfoBloodPressure;
    this.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected = linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected;
    this.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected = linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected;
    this.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved = linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved;
    this.linearLayoutLockScreenDeviceInfoLifetemp = linearLayoutLockScreenDeviceInfoLifetemp;
    this.linearLayoutLockScreenDeviceInfoLifetouch = linearLayoutLockScreenDeviceInfoLifetouch;
    this.linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected = linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected;
    this.linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected = linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected;
    this.linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved = linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved;
    this.linearLayoutLockScreenDeviceInfoNoninWristOx = linearLayoutLockScreenDeviceInfoNoninWristOx;
    this.linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected = linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected;
    this.linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected = linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected;
    this.linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved = linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved;
    this.linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected = linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected;
    this.linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected = linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected;
    this.linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved = linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved;
    this.linearLayoutLockScreenDeviceInfoWeightScale = linearLayoutLockScreenDeviceInfoWeightScale;
    this.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected = linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected;
    this.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected = linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected;
    this.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved = linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved;
    this.linearLayoutLockScreenDeviceRedBorderStatusBloodPressure = linearLayoutLockScreenDeviceRedBorderStatusBloodPressure;
    this.linearLayoutLockScreenDeviceRedBorderStatusLifetemp = linearLayoutLockScreenDeviceRedBorderStatusLifetemp;
    this.linearLayoutLockScreenDeviceRedBorderStatusLifetouch = linearLayoutLockScreenDeviceRedBorderStatusLifetouch;
    this.linearLayoutLockScreenDeviceRedBorderStatusNonin = linearLayoutLockScreenDeviceRedBorderStatusNonin;
    this.linearLayoutLockScreenDeviceRedBorderStatusWeightScale = linearLayoutLockScreenDeviceRedBorderStatusWeightScale;
    this.linearLayoutStartVideoCall = linearLayoutStartVideoCall;
    this.qrBarCode = qrBarCode;
    this.tableRowManuallyEnteredOnlySession = tableRowManuallyEnteredOnlySession;
    this.tableRowSensorDeviceInfo = tableRowSensorDeviceInfo;
    this.tableRowSoftwareUpdatePending = tableRowSoftwareUpdatePending;
    this.tableRowStartVideoCall = tableRowStartVideoCall;
    this.textBloodPressure = textBloodPressure;
    this.textBloodPressureHumanReadableDeviceId = textBloodPressureHumanReadableDeviceId;
    this.textLifetempBatteryPercentage = textLifetempBatteryPercentage;
    this.textLifetempHumanReadableDeviceId = textLifetempHumanReadableDeviceId;
    this.textLifetempLabel = textLifetempLabel;
    this.textLifetempRedBorderStatus = textLifetempRedBorderStatus;
    this.textLifetouchBatteryPercentage = textLifetouchBatteryPercentage;
    this.textLifetouchHumanReadableDeviceId = textLifetouchHumanReadableDeviceId;
    this.textLifetouchLabel = textLifetouchLabel;
    this.textLifetouchRedBorderStatus = textLifetouchRedBorderStatus;
    this.textLongPress = textLongPress;
    this.textManualVitalsOnlySession = textManualVitalsOnlySession;
    this.textNoninRedBorderStatus = textNoninRedBorderStatus;
    this.textNoninWristOxHumanReadableDeviceId = textNoninWristOxHumanReadableDeviceId;
    this.textNoninWristOxLabel = textNoninWristOxLabel;
    this.textPleaseScanIdQrCode = textPleaseScanIdQrCode;
    this.textQrCodeUnlockPageHelp = textQrCodeUnlockPageHelp;
    this.textSoftwareUpdatePending = textSoftwareUpdatePending;
    this.textStartVideoCall = textStartVideoCall;
    this.textWeightScale = textWeightScale;
    this.textWeightScaleHumanReadableDeviceId = textWeightScaleHumanReadableDeviceId;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static QrCodeUnlockBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QrCodeUnlockBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.qr_code_unlock, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QrCodeUnlockBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout barCodeActivityQrUnlock = (LinearLayout) rootView;

      id = R.id.buttonSimulateAdminQrCode;
      Button buttonSimulateAdminQrCode = ViewBindings.findChildViewById(rootView, id);
      if (buttonSimulateAdminQrCode == null) {
        break missingId;
      }

      id = R.id.buttonSimulateGeneralQrCode;
      Button buttonSimulateGeneralQrCode = ViewBindings.findChildViewById(rootView, id);
      if (buttonSimulateGeneralQrCode == null) {
        break missingId;
      }

      id = R.id.buttonUnlockQrCodeScanScreen;
      Button buttonUnlockQrCodeScanScreen = ViewBindings.findChildViewById(rootView, id);
      if (buttonUnlockQrCodeScanScreen == null) {
        break missingId;
      }

      id = R.id.heartbeat;
      ImageView heartbeat = ViewBindings.findChildViewById(rootView, id);
      if (heartbeat == null) {
        break missingId;
      }

      id = R.id.imageBatteryBloodPressure;
      ImageView imageBatteryBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (imageBatteryBloodPressure == null) {
        break missingId;
      }

      id = R.id.imageBatteryLifetemp;
      ImageView imageBatteryLifetemp = ViewBindings.findChildViewById(rootView, id);
      if (imageBatteryLifetemp == null) {
        break missingId;
      }

      id = R.id.imageBatteryLifetouch;
      ImageView imageBatteryLifetouch = ViewBindings.findChildViewById(rootView, id);
      if (imageBatteryLifetouch == null) {
        break missingId;
      }

      id = R.id.imageBatteryNoninWristOx;
      ImageView imageBatteryNoninWristOx = ViewBindings.findChildViewById(rootView, id);
      if (imageBatteryNoninWristOx == null) {
        break missingId;
      }

      id = R.id.imageBatteryWeightScale;
      ImageView imageBatteryWeightScale = ViewBindings.findChildViewById(rootView, id);
      if (imageBatteryWeightScale == null) {
        break missingId;
      }

      id = R.id.imageBloodPressureOutOfRange;
      ImageView imageBloodPressureOutOfRange = ViewBindings.findChildViewById(rootView, id);
      if (imageBloodPressureOutOfRange == null) {
        break missingId;
      }

      id = R.id.imageLifetouchOutOfRange;
      ImageView imageLifetouchOutOfRange = ViewBindings.findChildViewById(rootView, id);
      if (imageLifetouchOutOfRange == null) {
        break missingId;
      }

      id = R.id.imagePulseOxOutOfRange;
      ImageView imagePulseOxOutOfRange = ViewBindings.findChildViewById(rootView, id);
      if (imagePulseOxOutOfRange == null) {
        break missingId;
      }

      id = R.id.imageSpaceFillerBloodPressure;
      ImageView imageSpaceFillerBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (imageSpaceFillerBloodPressure == null) {
        break missingId;
      }

      id = R.id.imageSpaceFillerLifetemp;
      ImageView imageSpaceFillerLifetemp = ViewBindings.findChildViewById(rootView, id);
      if (imageSpaceFillerLifetemp == null) {
        break missingId;
      }

      id = R.id.imageSpaceFillerNonin;
      ImageView imageSpaceFillerNonin = ViewBindings.findChildViewById(rootView, id);
      if (imageSpaceFillerNonin == null) {
        break missingId;
      }

      id = R.id.imageSpaceFillerWeightScale;
      ImageView imageSpaceFillerWeightScale = ViewBindings.findChildViewById(rootView, id);
      if (imageSpaceFillerWeightScale == null) {
        break missingId;
      }

      id = R.id.imageThermometerOutOfRange;
      ImageView imageThermometerOutOfRange = ViewBindings.findChildViewById(rootView, id);
      if (imageThermometerOutOfRange == null) {
        break missingId;
      }

      id = R.id.imageVideoCall;
      ImageView imageVideoCall = ViewBindings.findChildViewById(rootView, id);
      if (imageVideoCall == null) {
        break missingId;
      }

      id = R.id.imageWeightScaleOutOfRange;
      ImageView imageWeightScaleOutOfRange = ViewBindings.findChildViewById(rootView, id);
      if (imageWeightScaleOutOfRange == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfo;
      LinearLayout linearLayoutLockScreenDeviceInfo = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfo == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoBloodPressure;
      LinearLayout linearLayoutLockScreenDeviceInfoBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoBloodPressure == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved;
      LinearLayout linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoLifetemp;
      LinearLayout linearLayoutLockScreenDeviceInfoLifetemp = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoLifetemp == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoLifetouch;
      LinearLayout linearLayoutLockScreenDeviceInfoLifetouch = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoLifetouch == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved;
      LinearLayout linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoNoninWristOx;
      LinearLayout linearLayoutLockScreenDeviceInfoNoninWristOx = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoNoninWristOx == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved;
      LinearLayout linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved;
      LinearLayout linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoWeightScale;
      LinearLayout linearLayoutLockScreenDeviceInfoWeightScale = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoWeightScale == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected;
      LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved;
      LinearLayout linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceRedBorderStatusBloodPressure;
      LinearLayout linearLayoutLockScreenDeviceRedBorderStatusBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceRedBorderStatusBloodPressure == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceRedBorderStatusLifetemp;
      LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetemp = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceRedBorderStatusLifetemp == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceRedBorderStatusLifetouch;
      LinearLayout linearLayoutLockScreenDeviceRedBorderStatusLifetouch = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceRedBorderStatusLifetouch == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceRedBorderStatusNonin;
      LinearLayout linearLayoutLockScreenDeviceRedBorderStatusNonin = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceRedBorderStatusNonin == null) {
        break missingId;
      }

      id = R.id.linearLayoutLockScreenDeviceRedBorderStatusWeightScale;
      LinearLayout linearLayoutLockScreenDeviceRedBorderStatusWeightScale = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutLockScreenDeviceRedBorderStatusWeightScale == null) {
        break missingId;
      }

      id = R.id.linearLayoutStartVideoCall;
      LinearLayout linearLayoutStartVideoCall = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutStartVideoCall == null) {
        break missingId;
      }

      id = R.id.qr_bar_code;
      LinearLayout qrBarCode = ViewBindings.findChildViewById(rootView, id);
      if (qrBarCode == null) {
        break missingId;
      }

      id = R.id.tableRowManuallyEnteredOnlySession;
      TableRow tableRowManuallyEnteredOnlySession = ViewBindings.findChildViewById(rootView, id);
      if (tableRowManuallyEnteredOnlySession == null) {
        break missingId;
      }

      id = R.id.tableRowSensorDeviceInfo;
      TableRow tableRowSensorDeviceInfo = ViewBindings.findChildViewById(rootView, id);
      if (tableRowSensorDeviceInfo == null) {
        break missingId;
      }

      id = R.id.tableRowSoftwareUpdatePending;
      TableRow tableRowSoftwareUpdatePending = ViewBindings.findChildViewById(rootView, id);
      if (tableRowSoftwareUpdatePending == null) {
        break missingId;
      }

      id = R.id.tableRowStartVideoCall;
      TableRow tableRowStartVideoCall = ViewBindings.findChildViewById(rootView, id);
      if (tableRowStartVideoCall == null) {
        break missingId;
      }

      id = R.id.textBloodPressure;
      TextView textBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (textBloodPressure == null) {
        break missingId;
      }

      id = R.id.textBloodPressureHumanReadableDeviceId;
      TextView textBloodPressureHumanReadableDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (textBloodPressureHumanReadableDeviceId == null) {
        break missingId;
      }

      id = R.id.textLifetempBatteryPercentage;
      TextView textLifetempBatteryPercentage = ViewBindings.findChildViewById(rootView, id);
      if (textLifetempBatteryPercentage == null) {
        break missingId;
      }

      id = R.id.textLifetempHumanReadableDeviceId;
      TextView textLifetempHumanReadableDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (textLifetempHumanReadableDeviceId == null) {
        break missingId;
      }

      id = R.id.textLifetempLabel;
      TextView textLifetempLabel = ViewBindings.findChildViewById(rootView, id);
      if (textLifetempLabel == null) {
        break missingId;
      }

      id = R.id.textLifetempRedBorderStatus;
      TextView textLifetempRedBorderStatus = ViewBindings.findChildViewById(rootView, id);
      if (textLifetempRedBorderStatus == null) {
        break missingId;
      }

      id = R.id.textLifetouchBatteryPercentage;
      TextView textLifetouchBatteryPercentage = ViewBindings.findChildViewById(rootView, id);
      if (textLifetouchBatteryPercentage == null) {
        break missingId;
      }

      id = R.id.textLifetouchHumanReadableDeviceId;
      TextView textLifetouchHumanReadableDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (textLifetouchHumanReadableDeviceId == null) {
        break missingId;
      }

      id = R.id.textLifetouchLabel;
      TextView textLifetouchLabel = ViewBindings.findChildViewById(rootView, id);
      if (textLifetouchLabel == null) {
        break missingId;
      }

      id = R.id.textLifetouchRedBorderStatus;
      TextView textLifetouchRedBorderStatus = ViewBindings.findChildViewById(rootView, id);
      if (textLifetouchRedBorderStatus == null) {
        break missingId;
      }

      id = R.id.textLongPress;
      TextView textLongPress = ViewBindings.findChildViewById(rootView, id);
      if (textLongPress == null) {
        break missingId;
      }

      id = R.id.textManualVitalsOnlySession;
      TextView textManualVitalsOnlySession = ViewBindings.findChildViewById(rootView, id);
      if (textManualVitalsOnlySession == null) {
        break missingId;
      }

      id = R.id.textNoninRedBorderStatus;
      TextView textNoninRedBorderStatus = ViewBindings.findChildViewById(rootView, id);
      if (textNoninRedBorderStatus == null) {
        break missingId;
      }

      id = R.id.textNoninWristOxHumanReadableDeviceId;
      TextView textNoninWristOxHumanReadableDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (textNoninWristOxHumanReadableDeviceId == null) {
        break missingId;
      }

      id = R.id.textNoninWristOxLabel;
      TextView textNoninWristOxLabel = ViewBindings.findChildViewById(rootView, id);
      if (textNoninWristOxLabel == null) {
        break missingId;
      }

      id = R.id.textPleaseScanIdQrCode;
      TextView textPleaseScanIdQrCode = ViewBindings.findChildViewById(rootView, id);
      if (textPleaseScanIdQrCode == null) {
        break missingId;
      }

      id = R.id.textQrCodeUnlockPageHelp;
      TextView textQrCodeUnlockPageHelp = ViewBindings.findChildViewById(rootView, id);
      if (textQrCodeUnlockPageHelp == null) {
        break missingId;
      }

      id = R.id.textSoftwareUpdatePending;
      TextView textSoftwareUpdatePending = ViewBindings.findChildViewById(rootView, id);
      if (textSoftwareUpdatePending == null) {
        break missingId;
      }

      id = R.id.textStartVideoCall;
      TextView textStartVideoCall = ViewBindings.findChildViewById(rootView, id);
      if (textStartVideoCall == null) {
        break missingId;
      }

      id = R.id.textWeightScale;
      TextView textWeightScale = ViewBindings.findChildViewById(rootView, id);
      if (textWeightScale == null) {
        break missingId;
      }

      id = R.id.textWeightScaleHumanReadableDeviceId;
      TextView textWeightScaleHumanReadableDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (textWeightScaleHumanReadableDeviceId == null) {
        break missingId;
      }

      return new QrCodeUnlockBinding((LinearLayout) rootView, barCodeActivityQrUnlock,
          buttonSimulateAdminQrCode, buttonSimulateGeneralQrCode, buttonUnlockQrCodeScanScreen,
          heartbeat, imageBatteryBloodPressure, imageBatteryLifetemp, imageBatteryLifetouch,
          imageBatteryNoninWristOx, imageBatteryWeightScale, imageBloodPressureOutOfRange,
          imageLifetouchOutOfRange, imagePulseOxOutOfRange, imageSpaceFillerBloodPressure,
          imageSpaceFillerLifetemp, imageSpaceFillerNonin, imageSpaceFillerWeightScale,
          imageThermometerOutOfRange, imageVideoCall, imageWeightScaleOutOfRange,
          linearLayoutLockScreenDeviceInfo, linearLayoutLockScreenDeviceInfoBloodPressure,
          linearLayoutLockScreenDeviceInfoBloodPressureShowWhenConnected,
          linearLayoutLockScreenDeviceInfoBloodPressureShowWhenNotConnected,
          linearLayoutLockScreenDeviceInfoBloodPressureShowWhenRemoved,
          linearLayoutLockScreenDeviceInfoLifetemp, linearLayoutLockScreenDeviceInfoLifetouch,
          linearLayoutLockScreenDeviceInfoLifetouchShowWhenConnected,
          linearLayoutLockScreenDeviceInfoLifetouchShowWhenNotConnected,
          linearLayoutLockScreenDeviceInfoLifetouchShowWhenRemoved,
          linearLayoutLockScreenDeviceInfoNoninWristOx,
          linearLayoutLockScreenDeviceInfoPulseOxShowWhenConnected,
          linearLayoutLockScreenDeviceInfoPulseOxShowWhenNotConnected,
          linearLayoutLockScreenDeviceInfoPulseOxShowWhenRemoved,
          linearLayoutLockScreenDeviceInfoThermometerShowWhenConnected,
          linearLayoutLockScreenDeviceInfoThermometerShowWhenNotConnected,
          linearLayoutLockScreenDeviceInfoThermometerShowWhenRemoved,
          linearLayoutLockScreenDeviceInfoWeightScale,
          linearLayoutLockScreenDeviceInfoWeightScaleShowWhenConnected,
          linearLayoutLockScreenDeviceInfoWeightScaleShowWhenNotConnected,
          linearLayoutLockScreenDeviceInfoWeightScaleShowWhenRemoved,
          linearLayoutLockScreenDeviceRedBorderStatusBloodPressure,
          linearLayoutLockScreenDeviceRedBorderStatusLifetemp,
          linearLayoutLockScreenDeviceRedBorderStatusLifetouch,
          linearLayoutLockScreenDeviceRedBorderStatusNonin,
          linearLayoutLockScreenDeviceRedBorderStatusWeightScale, linearLayoutStartVideoCall,
          qrBarCode, tableRowManuallyEnteredOnlySession, tableRowSensorDeviceInfo,
          tableRowSoftwareUpdatePending, tableRowStartVideoCall, textBloodPressure,
          textBloodPressureHumanReadableDeviceId, textLifetempBatteryPercentage,
          textLifetempHumanReadableDeviceId, textLifetempLabel, textLifetempRedBorderStatus,
          textLifetouchBatteryPercentage, textLifetouchHumanReadableDeviceId, textLifetouchLabel,
          textLifetouchRedBorderStatus, textLongPress, textManualVitalsOnlySession,
          textNoninRedBorderStatus, textNoninWristOxHumanReadableDeviceId, textNoninWristOxLabel,
          textPleaseScanIdQrCode, textQrCodeUnlockPageHelp, textSoftwareUpdatePending,
          textStartVideoCall, textWeightScale, textWeightScaleHumanReadableDeviceId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
