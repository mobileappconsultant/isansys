// Generated by Dagger (https://dagger.dev).
package com.isansys.ui.permissions_fragment;

import com.data.local.SharedPref;
import com.permissions.Permissions;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FragmentPermissions_MembersInjector implements MembersInjector<FragmentPermissions> {
  private final Provider<Permissions> permissionsProvider;

  private final Provider<SharedPref> sharedPrefProvider;

  public FragmentPermissions_MembersInjector(Provider<Permissions> permissionsProvider,
      Provider<SharedPref> sharedPrefProvider) {
    this.permissionsProvider = permissionsProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  public static MembersInjector<FragmentPermissions> create(
      Provider<Permissions> permissionsProvider, Provider<SharedPref> sharedPrefProvider) {
    return new FragmentPermissions_MembersInjector(permissionsProvider, sharedPrefProvider);
  }

  @Override
  public void injectMembers(FragmentPermissions instance) {
    injectPermissions(instance, permissionsProvider.get());
    injectSharedPref(instance, sharedPrefProvider.get());
  }

  @InjectedFieldSignature("com.isansys.ui.permissions_fragment.FragmentPermissions.permissions")
  public static void injectPermissions(FragmentPermissions instance, Permissions permissions) {
    instance.permissions = permissions;
  }

  @InjectedFieldSignature("com.isansys.ui.permissions_fragment.FragmentPermissions.sharedPref")
  public static void injectSharedPref(FragmentPermissions instance, SharedPref sharedPref) {
    instance.sharedPref = sharedPref;
  }
}
